#!/usr/bin/env python3
"""
Migra√ß√£o para implementar recursos de calend√°rio e agenda (Itens 28-31):
- Adicionar cor_agenda ao modelo User (Item 29)
- Adicionar is_pessoal e criado_por ao modelo Visita (Item 31)
- Garantir que status da Visita suporte 'Cancelado' (Item 30)
"""

import os
import sys
from app import app, db
from models import User, Visita
from sqlalchemy import text

def run_migration():
    """Execute a migra√ß√£o incremental do banco de dados"""
    with app.app_context():
        try:
            print("üîÑ Iniciando migra√ß√£o de recursos de calend√°rio e agenda...")
            
            # Item 29: Adicionar campo cor_agenda ao modelo User
            print("üìù Adicionando campo cor_agenda aos usu√°rios...")
            try:
                db.session.execute(text("ALTER TABLE users ADD COLUMN cor_agenda VARCHAR(7) DEFAULT '#0EA5E9'"))
                print("‚úÖ Campo cor_agenda adicionado com sucesso")
            except Exception as e:
                if "already exists" in str(e) or "duplicate column" in str(e).lower():
                    print("‚ÑπÔ∏è  Campo cor_agenda j√° existe")
                else:
                    print(f"‚ö†Ô∏è  Erro ao adicionar cor_agenda: {e}")

            # Item 31: Adicionar campos is_pessoal e criado_por ao modelo Visita
            print("üìù Adicionando campos de compromisso pessoal...")
            try:
                db.session.execute(text("ALTER TABLE visitas ADD COLUMN is_pessoal BOOLEAN DEFAULT FALSE"))
                print("‚úÖ Campo is_pessoal adicionado com sucesso")
            except Exception as e:
                if "already exists" in str(e) or "duplicate column" in str(e).lower():
                    print("‚ÑπÔ∏è  Campo is_pessoal j√° existe")
                else:
                    print(f"‚ö†Ô∏è  Erro ao adicionar is_pessoal: {e}")
            
            try:
                db.session.execute(text("ALTER TABLE visitas ADD COLUMN criado_por INTEGER REFERENCES users(id)"))
                print("‚úÖ Campo criado_por adicionado com sucesso")
            except Exception as e:
                if "already exists" in str(e) or "duplicate column" in str(e).lower():
                    print("‚ÑπÔ∏è  Campo criado_por j√° existe")
                else:
                    print(f"‚ö†Ô∏è  Erro ao adicionar criado_por: {e}")
                    
            # Garantir que visitas existentes tenham criado_por preenchido
            try:
                result = db.session.execute(text("SELECT COUNT(*) FROM visitas WHERE criado_por IS NULL")).scalar()
                if result > 0:
                    db.session.execute(text("""
                        UPDATE visitas 
                        SET criado_por = responsavel_id 
                        WHERE criado_por IS NULL
                    """))
                    print(f"‚úÖ Preenchido criado_por para {result} visitas existentes")
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro ao preencher criado_por: {e}")

            # Item 30: Verificar se status j√° suporte 'Cancelado'
            print("üìù Verificando status de visitas...")
            try:
                # Verificar se j√° existem visitas canceladas
                canceladas = db.session.execute(text("SELECT COUNT(*) FROM visitas WHERE status = 'Cancelado'")).scalar()
                print(f"‚ÑπÔ∏è  Encontradas {canceladas} visitas com status 'Cancelado'")
                
                # Verificar se precisamos ajustar algum status 
                result = db.session.execute(text("SELECT DISTINCT status FROM visitas")).fetchall()
                status_existentes = [row[0] for row in result]
                print(f"‚ÑπÔ∏è  Status existentes: {', '.join(status_existentes)}")
                
                if 'Cancelado' not in status_existentes:
                    print("‚úÖ Status 'Cancelado' ser√° suportado pelo modelo atualizado")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro ao verificar status: {e}")

            # Aplicar todas as mudan√ßas
            db.session.commit()
            print("‚úÖ Migra√ß√£o conclu√≠da com sucesso!")
            return True
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå Erro na migra√ß√£o: {e}")
            return False

if __name__ == "__main__":
    if run_migration():
        print("üéâ Migra√ß√£o de recursos de calend√°rio completada!")
        sys.exit(0)
    else:
        print("üí• Falha na migra√ß√£o!")
        sys.exit(1)