/**
 * Sistema de Normaliza√ß√£o Inteligente de Endere√ßos
 * Converte abrevia√ß√µes comuns em formas completas para melhorar geocoding
 */

class AddressNormalizer {
    constructor() {
        // Dicion√°rio de substitui√ß√µes configur√°vel
        this.rules = {
            // Logradouros
            'R ': 'Rua ',
            'R.': 'Rua',
            'Av ': 'Avenida ',
            'Av.': 'Avenida',
            'P√ß ': 'Pra√ßa ',
            'P√ßa ': 'Pra√ßa ',
            'P√ß.': 'Pra√ßa',
            'P√ßa.': 'Pra√ßa',
            'Rod.': 'Rodovia',
            'Estr.': 'Estrada',
            'Al.': 'Alameda',
            'Tv.': 'Travessa',
            'Vl.': 'Vila',
            'Jd.': 'Jardim',
            'Pq.': 'Parque',
            'Cj.': 'Conjunto',
            'Res.': 'Residencial',
            'Bl.': 'Bloco',
            'Qt.': 'Quadra',
            'Lt.': 'Lote',
            
            // N√∫meros ordinais comuns
            ' 1o ': ' Primeiro ',
            ' 2o ': ' Segundo ',
            ' 3o ': ' Terceiro ',
            ' 1a ': ' Primeira ',
            ' 2a ': ' Segunda ',
            ' 3a ': ' Terceira ',
            
            // Abrevia√ß√µes de estados
            ' SP': ' S√£o Paulo',
            ' RJ': ' Rio de Janeiro', 
            ' MG': ' Minas Gerais',
            ' RS': ' Rio Grande do Sul',
            ' PR': ' Paran√°',
            ' SC': ' Santa Catarina',
            ' BA': ' Bahia',
            ' GO': ' Goi√°s',
            ' DF': ' Distrito Federal',
            ' ES': ' Esp√≠rito Santo',
            ' MT': ' Mato Grosso',
            ' MS': ' Mato Grosso do Sul',
            ' PE': ' Pernambuco',
            ' CE': ' Cear√°',
            ' PB': ' Para√≠ba',
            ' RN': ' Rio Grande do Norte',
            ' AL': ' Alagoas',
            ' SE': ' Sergipe',
            ' PI': ' Piau√≠',
            ' MA': ' Maranh√£o',
            ' TO': ' Tocantins',
            ' PA': ' Par√°',
            ' AM': ' Amazonas',
            ' RR': ' Roraima',
            ' AP': ' Amap√°',
            ' AC': ' Acre',
            ' RO': ' Rond√¥nia',
            
            // Outras abrevia√ß√µes comuns
            'Cep': 'CEP',
            ' N ': ' Norte ',
            ' S ': ' Sul ',
            ' L ': ' Leste ',
            ' O ': ' Oeste ',
            ' Centro': ' Centro',
            ' Ctr': ' Centro'
        };
    }

    /**
     * Normaliza um endere√ßo aplicando todas as regras de substitui√ß√£o
     * @param {string} address - Endere√ßo original
     * @returns {string} - Endere√ßo normalizado
     */
    normalize(address) {
        if (!address || typeof address !== 'string') {
            return address;
        }

        let normalizedAddress = address.trim();
        const originalAddress = normalizedAddress;

        // Aplicar todas as regras de substitui√ß√£o
        for (const [abbreviation, fullForm] of Object.entries(this.rules)) {
            // Usar regex para substitui√ß√µes mais precisas
            if (abbreviation.endsWith(' ')) {
                // Para abrevia√ß√µes que terminam com espa√ßo, garantir que seja in√≠cio de palavra
                const regex = new RegExp(`\\b${this.escapeRegex(abbreviation)}`, 'gi');
                normalizedAddress = normalizedAddress.replace(regex, fullForm);
            } else if (abbreviation.startsWith(' ')) {
                // Para abrevia√ß√µes que come√ßam com espa√ßo, garantir que seja final de palavra
                const regex = new RegExp(`${this.escapeRegex(abbreviation)}\\b`, 'gi');
                normalizedAddress = normalizedAddress.replace(regex, fullForm);
            } else {
                // Para abrevia√ß√µes sem espa√ßos, usar substitui√ß√£o direta
                const regex = new RegExp(`\\b${this.escapeRegex(abbreviation)}\\b`, 'gi');
                normalizedAddress = normalizedAddress.replace(regex, fullForm);
            }
        }

        // Limpar espa√ßos duplos
        normalizedAddress = normalizedAddress.replace(/\s+/g, ' ').trim();

        // Aplicar corre√ß√µes adicionais
        normalizedAddress = this.applyAdditionalCorrections(normalizedAddress);

        // Log da transforma√ß√£o se houve mudan√ßa
        if (originalAddress !== normalizedAddress) {
            console.log(`üìç ENDERE√áO NORMALIZADO: "${originalAddress}" ‚Üí "${normalizedAddress}"`);
        }

        return normalizedAddress;
    }

    /**
     * Escapa caracteres especiais para uso em regex
     * @param {string} string - String para escapar
     * @returns {string} - String escapada
     */
    escapeRegex(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }

    /**
     * Aplica corre√ß√µes adicionais ao endere√ßo normalizado
     * @param {string} address - Endere√ßo para corrigir
     * @returns {string} - Endere√ßo corrigido
     */
    applyAdditionalCorrections(address) {
        let corrected = address;

        // Corrigir "Rua de" para "Rua"
        corrected = corrected.replace(/\bRua de\b/gi, 'Rua');
        
        // Corrigir espa√ßamento ap√≥s v√≠rgulas
        corrected = corrected.replace(/,(\S)/g, ', $1');
        
        // Corrigir n√∫meros de endere√ßo (ex: "Rua X,123" ‚Üí "Rua X, 123")
        corrected = corrected.replace(/([A-Za-z]),(\d)/g, '$1, $2');
        
        // Capitalizar primeira letra de cada palavra importante
        corrected = this.capitalizeImportantWords(corrected);

        return corrected;
    }

    /**
     * Capitaliza palavras importantes no endere√ßo
     * @param {string} address - Endere√ßo para capitalizar
     * @returns {string} - Endere√ßo capitalizado
     */
    capitalizeImportantWords(address) {
        const prepositions = ['de', 'da', 'do', 'das', 'dos', 'e', 'em', 'na', 'no', 'para', 'por', 'com'];
        
        return address.replace(/\b\w+\b/g, function(word) {
            // N√£o capitalizar preposi√ß√µes (exceto se for a primeira palavra)
            if (prepositions.includes(word.toLowerCase()) && word !== address.split(' ')[0]) {
                return word.toLowerCase();
            }
            // Capitalizar primeira letra
            return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
        });
    }

    /**
     * Adiciona uma nova regra de normaliza√ß√£o
     * @param {string} abbreviation - Abrevia√ß√£o
     * @param {string} fullForm - Forma completa
     */
    addRule(abbreviation, fullForm) {
        this.rules[abbreviation] = fullForm;
        console.log(`üìç Nova regra adicionada: "${abbreviation}" ‚Üí "${fullForm}"`);
    }

    /**
     * Remove uma regra de normaliza√ß√£o
     * @param {string} abbreviation - Abrevia√ß√£o para remover
     */
    removeRule(abbreviation) {
        if (this.rules[abbreviation]) {
            delete this.rules[abbreviation];
            console.log(`üìç Regra removida: "${abbreviation}"`);
        }
    }

    /**
     * Lista todas as regras ativas
     * @returns {Object} - Objeto com todas as regras
     */
    listRules() {
        return { ...this.rules };
    }
}

// Criar inst√¢ncia global do normalizador
window.addressNormalizer = new AddressNormalizer();

// Fun√ß√£o de conveni√™ncia para normalizar endere√ßos
window.normalizeAddress = function(address) {
    return window.addressNormalizer.normalize(address);
};

// Exportar para uso como m√≥dulo se necess√°rio
if (typeof module !== 'undefined' && module.exports) {
    module.exports = AddressNormalizer;
}