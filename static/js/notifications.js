// Sistema de Notifica√ß√µes Push - Vers√£o Robusta com Debug Completo
class NotificationManager {
    constructor() {
        this.isSupported = 'Notification' in window && 'serviceWorker' in navigator;
        this.permission = this.isSupported ? Notification.permission : 'denied';
        this.subscriptionKey = null;
        this.currentPosition = null;
        this.watchId = null;
        this.nearbyProjects = [];
        this.notifiedProjects = new Set();
        this.swRegistration = null;
        
        console.log('üîî NOTIFICATIONS: Inicializando sistema de notifica√ß√µes');
        console.log('üîî NOTIFICATIONS: Suporte:', this.isSupported ? 'SIM' : 'N√ÉO');
        console.log('üîî NOTIFICATIONS: Permiss√£o atual:', this.permission);
        
        this.init();
    }

    async init() {
        if (!this.isSupported) {
            console.warn('‚ö†Ô∏è NOTIFICATIONS: Notifica√ß√µes n√£o suportadas neste navegador');
            return;
        }

        try {
            // Registrar service worker se necess√°rio
            await this.ensureServiceWorker();
            
            // Verificar se h√° uma subscription ativa
            await this.checkExistingSubscription();
            
            // Se j√° tem permiss√£o, iniciar funcionalidades
            if (this.permission === 'granted') {
                console.log('‚úÖ NOTIFICATIONS: Permiss√£o j√° concedida, iniciando recursos');
                this.startLocationMonitoring();
                this.startPeriodicCheck();
            } else {
                console.log('‚ÑπÔ∏è NOTIFICATIONS: Aguardando permiss√£o do usu√°rio');
            }
        } catch (error) {
            console.error('‚ùå NOTIFICATIONS: Erro na inicializa√ß√£o:', error);
        }
    }

    async ensureServiceWorker() {
        try {
            console.log('üîß NOTIFICATIONS: Verificando service worker...');
            
            if ('serviceWorker' in navigator) {
                // Tentar obter registration existente
                this.swRegistration = await navigator.serviceWorker.getRegistration();
                
                if (!this.swRegistration) {
                    console.log('üì¶ NOTIFICATIONS: Registrando service worker...');
                    this.swRegistration = await navigator.serviceWorker.register('/static/js/sw.js');
                    console.log('‚úÖ NOTIFICATIONS: Service worker registrado');
                } else {
                    console.log('‚úÖ NOTIFICATIONS: Service worker j√° registrado');
                }
                
                // Aguardar estar pronto
                await navigator.serviceWorker.ready;
                console.log('‚úÖ NOTIFICATIONS: Service worker pronto');
            }
        } catch (error) {
            console.error('‚ùå NOTIFICATIONS: Erro ao configurar service worker:', error);
            throw error;
        }
    }

    async checkPermissionStatus() {
        console.log('üîç NOTIFICATIONS: Verificando status da permiss√£o...');
        
        const status = Notification.permission;
        this.permission = status;
        
        console.log(`üìä NOTIFICATIONS: Status = "${status}"`);
        
        return {
            granted: status === 'granted',
            denied: status === 'denied',
            default: status === 'default',
            canAsk: status === 'default',
            needsManualEnable: status === 'denied'
        };
    }

    async requestPermission() {
        console.log('üîî NOTIFICATIONS: Solicitando permiss√£o...');
        
        if (!this.isSupported) {
            const error = 'Notifica√ß√µes n√£o suportadas neste navegador';
            console.error('‚ùå NOTIFICATIONS:', error);
            this.showUserMessage('Notifica√ß√µes n√£o dispon√≠veis', 'Seu navegador n√£o suporta notifica√ß√µes push.', 'warning');
            throw new Error(error);
        }

        const status = await this.checkPermissionStatus();
        console.log('üìä NOTIFICATIONS: Status antes de pedir:', status);

        // Se j√° concedido, apenas configurar
        if (status.granted) {
            console.log('‚úÖ NOTIFICATIONS: Permiss√£o j√° concedida');
            await this.setupNotifications();
            return true;
        }

        // Se negado, orientar usu√°rio
        if (status.denied) {
            console.warn('üö´ NOTIFICATIONS: Permiss√£o negada anteriormente');
            this.showDeniedInstructions();
            return false;
        }

        // Se default, pedir permiss√£o
        if (status.canAsk) {
            try {
                console.log('‚ùì NOTIFICATIONS: Exibindo prompt de permiss√£o...');
                const permission = await Notification.requestPermission();
                this.permission = permission;
                
                console.log('üìä NOTIFICATIONS: Resposta do usu√°rio:', permission);
                
                if (permission === 'granted') {
                    console.log('‚úÖ NOTIFICATIONS: Permiss√£o concedida!');
                    await this.setupNotifications();
                    return true;
                } else if (permission === 'denied') {
                    console.warn('üö´ NOTIFICATIONS: Permiss√£o negada pelo usu√°rio');
                    this.showDeniedInstructions();
                    return false;
                } else {
                    console.warn('‚ö†Ô∏è NOTIFICATIONS: Permiss√£o ignorada/fechada');
                    return false;
                }
            } catch (error) {
                console.error('‚ùå NOTIFICATIONS: Erro ao solicitar permiss√£o:', error);
                throw error;
            }
        }
        
        return false;
    }

    async setupNotifications() {
        try {
            console.log('‚öôÔ∏è NOTIFICATIONS: Configurando notifica√ß√µes...');
            
            // 1. Garantir service worker
            await this.ensureServiceWorker();
            console.log('‚úÖ NOTIFICATIONS: Service worker OK');
            
            // 2. Fazer subscription
            await this.subscribeToPush();
            console.log('‚úÖ NOTIFICATIONS: Subscription criada');
            
            // 3. Mostrar notifica√ß√£o de boas-vindas
            this.showWelcomeNotification();
            console.log('‚úÖ NOTIFICATIONS: Boas-vindas exibida');
            
            // 4. Iniciar monitoramento
            this.startLocationMonitoring();
            this.startPeriodicCheck();
            console.log('‚úÖ NOTIFICATIONS: Monitoramento iniciado');
            
            // 5. Mensagem de sucesso ao usu√°rio
            this.showUserMessage(
                'Notifica√ß√µes Ativadas!',
                'Voc√™ receber√° alertas sobre obras pr√≥ximas e novidades do sistema.',
                'success'
            );
            
        } catch (error) {
            console.error('‚ùå NOTIFICATIONS: Erro ao configurar:', error);
            this.showUserMessage(
                'Erro ao Ativar Notifica√ß√µes',
                'Ocorreu um erro ao configurar as notifica√ß√µes. Tente novamente.',
                'danger'
            );
            throw error;
        }
    }

    async subscribeToPush() {
        try {
            console.log('üì° NOTIFICATIONS: Iniciando subscription push...');
            
            if (!this.swRegistration) {
                await this.ensureServiceWorker();
            }
            
            // Verificar se j√° existe uma subscription
            let subscription = await this.swRegistration.pushManager.getSubscription();
            
            if (subscription) {
                console.log('‚úÖ NOTIFICATIONS: Subscription existente encontrada');
                this.subscriptionKey = subscription;
            } else {
                console.log('üì° NOTIFICATIONS: Criando nova subscription...');
                
                // Criar nova subscription
                subscription = await this.swRegistration.pushManager.subscribe({
                    userVisibleOnly: true,
                    applicationServerKey: this.urlBase64ToUint8Array(this.getVapidPublicKey())
                });
                
                console.log('‚úÖ NOTIFICATIONS: Nova subscription criada');
                this.subscriptionKey = subscription;
            }
            
            // Enviar subscription para o servidor
            console.log('üì§ NOTIFICATIONS: Enviando subscription ao servidor...');
            const response = await fetch('/api/notifications/subscribe', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': this.getCSRFToken()
                },
                body: JSON.stringify({
                    subscription: subscription.toJSON(),
                    user_agent: navigator.userAgent,
                    timestamp: new Date().toISOString()
                })
            });
            
            if (response.ok) {
                console.log('‚úÖ NOTIFICATIONS: Subscription registrada no servidor');
            } else {
                console.warn('‚ö†Ô∏è NOTIFICATIONS: Falha ao registrar no servidor:', response.status);
            }
            
        } catch (error) {
            console.error('‚ùå NOTIFICATIONS: Erro ao criar push subscription:', error);
            console.error('‚ùå NOTIFICATIONS: Detalhes do erro:', error.message, error.stack);
            throw error;
        }
    }

    async checkExistingSubscription() {
        try {
            console.log('üîç NOTIFICATIONS: Verificando subscription existente...');
            
            if (!this.swRegistration) {
                await this.ensureServiceWorker();
            }
            
            const subscription = await this.swRegistration.pushManager.getSubscription();
            
            if (subscription) {
                this.subscriptionKey = subscription;
                console.log('‚úÖ NOTIFICATIONS: Subscription ativa encontrada');
                console.log('üìä NOTIFICATIONS: Endpoint:', subscription.endpoint);
            } else {
                console.log('‚ÑπÔ∏è NOTIFICATIONS: Nenhuma subscription ativa');
            }
        } catch (error) {
            console.error('‚ùå NOTIFICATIONS: Erro ao verificar subscription:', error);
        }
    }

    startLocationMonitoring() {
        if (!window.geoLocation) {
            console.warn('‚ö†Ô∏è NOTIFICATIONS: Sistema de geolocaliza√ß√£o n√£o dispon√≠vel');
            return;
        }

        console.log('üìç NOTIFICATIONS: Iniciando monitoramento de localiza√ß√£o com sistema avan√ßado...');

        // Usar o sistema de geolocaliza√ß√£o avan√ßado com fallback para IP
        window.geoLocation.getLocation({
            enableHighAccuracy: false,
            timeout: 30000,
            maximumAge: 300000,
            showUI: false,  // N√£o mostrar UI para notifica√ß√µes em background
            fallbackToIP: true,  // Usar IP se GPS falhar
            reverseGeocode: false  // N√£o precisa de endere√ßo para notifica√ß√µes
        })
        .then((position) => {
            this.currentPosition = position;
            console.log('üìç NOTIFICATIONS: Localiza√ß√£o inicial obtida:', {
                lat: position.coords.latitude,
                lon: position.coords.longitude,
                source: position.source || 'gps'
            });
            this.checkNearbyProjects();
            
            // Monitorar mudan√ßas de localiza√ß√£o com sistema avan√ßado
            this.watchId = window.geoLocation.watchLocation(
                (newPosition, error) => {
                    if (error) {
                        console.warn('‚ö†Ô∏è NOTIFICATIONS: Erro no monitoramento:', error.message);
                        return;
                    }
                    
                    if (newPosition) {
                        this.currentPosition = newPosition;
                        console.log('üìç NOTIFICATIONS: Localiza√ß√£o atualizada');
                        this.checkNearbyProjects();
                    }
                },
                {
                    enableHighAccuracy: false,
                    timeout: 60000,
                    maximumAge: 300000
                }
            );
            console.log('‚úÖ NOTIFICATIONS: Watch position ativo (ID:', this.watchId, ')');
        })
        .catch((error) => {
            console.warn('‚ö†Ô∏è NOTIFICATIONS: N√£o foi poss√≠vel obter localiza√ß√£o:', error.message);
            // Mostrar erro ao usu√°rio com instru√ß√µes
            this.showUserMessage(
                'Erro de Localiza√ß√£o',
                'N√£o foi poss√≠vel obter sua localiza√ß√£o. Verifique as permiss√µes do GPS.',
                'warning',
                3000
            );
        });
    }

    async checkNearbyProjects() {
        if (!this.currentPosition) return;

        try {
            const lat = this.currentPosition.coords.latitude;
            const lon = this.currentPosition.coords.longitude;
            
            console.log(`üîç NOTIFICATIONS: Buscando obras pr√≥ximas (${lat.toFixed(4)}, ${lon.toFixed(4)})`);
            
            const response = await fetch(`/api/nearby-projects?lat=${lat}&lon=${lon}&radius=1`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const data = await response.json();
                this.nearbyProjects = data.projects || [];
                
                console.log(`üìä NOTIFICATIONS: ${this.nearbyProjects.length} obra(s) pr√≥xima(s)`);
                
                this.nearbyProjects.forEach(project => {
                    if (!this.notifiedProjects.has(project.id) && project.distance < 500) {
                        console.log(`üîî NOTIFICATIONS: Notificando obra pr√≥xima: ${project.nome}`);
                        this.showProximityNotification(project);
                        this.notifiedProjects.add(project.id);
                    }
                });
            }
        } catch (error) {
            console.error('‚ùå NOTIFICATIONS: Erro ao verificar projetos pr√≥ximos:', error);
        }
    }

    startPeriodicCheck() {
        console.log('‚è∞ NOTIFICATIONS: Iniciando verifica√ß√£o peri√≥dica de atualiza√ß√µes');
        
        // Verificar a cada 30 minutos
        setInterval(() => {
            console.log('‚è∞ NOTIFICATIONS: Executando verifica√ß√£o peri√≥dica...');
            this.checkForUpdates();
        }, 30 * 60 * 1000);

        // Verificar imediatamente
        this.checkForUpdates();
    }

    async checkForUpdates() {
        try {
            console.log('üîç NOTIFICATIONS: Verificando atualiza√ß√µes...');
            
            const response = await fetch('/api/notifications/check-updates');
            
            if (response.ok) {
                const data = await response.json();
                
                if (data.has_updates) {
                    console.log(`üì¨ NOTIFICATIONS: ${data.updates.length} atualiza√ß√£o(√µes) encontrada(s)`);
                    data.updates.forEach(update => {
                        this.showUpdateNotification(update);
                    });
                } else {
                    console.log('‚ÑπÔ∏è NOTIFICATIONS: Nenhuma atualiza√ß√£o');
                }
            }
        } catch (error) {
            console.error('‚ùå NOTIFICATIONS: Erro ao verificar atualiza√ß√µes:', error);
        }
    }

    showWelcomeNotification() {
        if (this.permission === 'granted') {
            console.log('üéâ NOTIFICATIONS: Exibindo boas-vindas');
            
            new Notification('ELP Relat√≥rios', {
                body: 'Notifica√ß√µes ativadas! Voc√™ ser√° avisado sobre obras pr√≥ximas e novidades.',
                icon: '/static/icons/icon-192x192.png',
                badge: '/static/icons/icon-96x96.png',
                tag: 'welcome'
            });
        }
    }

    showProximityNotification(project) {
        if (this.permission === 'granted') {
            console.log(`üìç NOTIFICATIONS: Exibindo alerta de proximidade: ${project.nome}`);
            
            new Notification('Obra Pr√≥xima Detectada', {
                body: `Voc√™ est√° pr√≥ximo da obra: ${project.nome}\nDist√¢ncia: ${Math.round(project.distance)}m`,
                icon: '/static/icons/icon-192x192.png',
                badge: '/static/icons/icon-96x96.png',
                vibrate: [200, 100, 200],
                tag: `proximity-${project.id}`,
                data: { 
                    type: 'proximity', 
                    project_id: project.id,
                    url: `/projects/${project.id}`
                }
            });
        }
    }

    showUpdateNotification(update) {
        if (this.permission === 'granted') {
            console.log(`üì¢ NOTIFICATIONS: Exibindo atualiza√ß√£o: ${update.title}`);
            
            new Notification(update.title || 'Novidade no App', {
                body: update.message,
                icon: '/static/icons/icon-192x192.png',
                badge: '/static/icons/icon-96x96.png',
                tag: `update-${update.id}`,
                data: { 
                    type: 'update', 
                    update_id: update.id,
                    url: update.url || '/'
                }
            });
        }
    }

    showDeniedInstructions() {
        const instructions = this.getBrowserInstructions();
        
        this.showUserMessage(
            'Notifica√ß√µes Bloqueadas',
            `<p>As notifica√ß√µes foram bloqueadas anteriormente. Para ativ√°-las:</p>${instructions}`,
            'warning',
            10000
        );
    }

    getBrowserInstructions() {
        const userAgent = navigator.userAgent.toLowerCase();
        
        if (userAgent.includes('chrome')) {
            return `
                <ol class="text-start">
                    <li>Clique no √≠cone <strong>üîí</strong> ao lado da URL</li>
                    <li>Procure por <strong>"Notifica√ß√µes"</strong></li>
                    <li>Altere para <strong>"Permitir"</strong></li>
                    <li>Recarregue a p√°gina</li>
                </ol>
            `;
        } else if (userAgent.includes('firefox')) {
            return `
                <ol class="text-start">
                    <li>Clique no √≠cone <strong>üîí</strong> ao lado da URL</li>
                    <li>Clique em <strong>"Limpar Permiss√µes"</strong></li>
                    <li>Recarregue e permita notifica√ß√µes novamente</li>
                </ol>
            `;
        } else if (userAgent.includes('safari')) {
            return `
                <ol class="text-start">
                    <li>Abra <strong>Prefer√™ncias do Safari</strong></li>
                    <li>V√° em <strong>"Sites"</strong> ‚Üí <strong>"Notifica√ß√µes"</strong></li>
                    <li>Encontre este site e altere para <strong>"Permitir"</strong></li>
                </ol>
            `;
        } else {
            return `
                <ol class="text-start">
                    <li>Acesse as configura√ß√µes do navegador</li>
                    <li>Procure por "Notifica√ß√µes" ou "Permiss√µes"</li>
                    <li>Encontre este site e permita notifica√ß√µes</li>
                    <li>Recarregue a p√°gina</li>
                </ol>
            `;
        }
    }

    showUserMessage(title, message, type = 'info', duration = 5000) {
        // Remover mensagens anteriores
        const existing = document.querySelector('.notification-user-message');
        if (existing) existing.remove();

        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show notification-user-message`;
        alertDiv.style.cssText = `
            position: fixed;
            top: 80px;
            right: 20px;
            z-index: 9999;
            min-width: 320px;
            max-width: 450px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        `;
        alertDiv.innerHTML = `
            <strong>${title}</strong><br>
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;

        document.body.appendChild(alertDiv);

        if (duration > 0) {
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, duration);
        }
    }

    // Utilit√°rios
    getVapidPublicKey() {
        return 'BEl62iUYgUivxIkv69yViEuiBIa40HI0staDiGnwSiGcC0K7QkU6g8R6T6I8O2fZllh7Z8i3K8E6NjwL5Q2v0G8';
    }

    urlBase64ToUint8Array(base64String) {
        const padding = '='.repeat((4 - base64String.length % 4) % 4);
        const base64 = (base64String + padding)
            .replace(/-/g, '+')
            .replace(/_/g, '/');

        const rawData = window.atob(base64);
        const outputArray = new Uint8Array(rawData.length);

        for (let i = 0; i < rawData.length; ++i) {
            outputArray[i] = rawData.charCodeAt(i);
        }
        return outputArray;
    }

    getCSRFToken() {
        const token = document.querySelector('meta[name="csrf-token"]');
        return token ? token.getAttribute('content') : '';
    }

    // Desativar notifica√ß√µes
    async unsubscribe() {
        try {
            console.log('üîï NOTIFICATIONS: Desativando notifica√ß√µes...');
            
            if (this.subscriptionKey) {
                await this.subscriptionKey.unsubscribe();
                console.log('‚úÖ NOTIFICATIONS: Subscription removida');
                
                // Informar o servidor
                await fetch('/api/notifications/unsubscribe', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': this.getCSRFToken()
                    }
                });
                
                this.subscriptionKey = null;
            }
            
            if (this.watchId && window.geoLocation) {
                window.geoLocation.stopWatching(this.watchId);
                this.watchId = null;
                console.log('‚úÖ NOTIFICATIONS: Monitoramento de localiza√ß√£o parado');
            }
            
            this.showUserMessage(
                'Notifica√ß√µes Desativadas',
                'Voc√™ n√£o receber√° mais alertas de proximidade e novidades.',
                'info'
            );
            
            console.log('‚úÖ NOTIFICATIONS: Notifica√ß√µes desativadas completamente');
        } catch (error) {
            console.error('‚ùå NOTIFICATIONS: Erro ao desativar:', error);
        }
    }
}

// Inicializar gerenciador de notifica√ß√µes
let notificationManager;

document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ NOTIFICATIONS: DOM carregado, inicializando...');
    notificationManager = new NotificationManager();
    
    // Expor globalmente
    window.notificationManager = notificationManager;
    console.log('‚úÖ NOTIFICATIONS: Gerenciador dispon√≠vel globalmente');
});

// Interface para ativar/desativar notifica√ß√µes
async function toggleNotifications() {
    console.log('üîÑ NOTIFICATIONS: Toggle solicitado');
    
    if (notificationManager.permission === 'granted') {
        console.log('üîï NOTIFICATIONS: Desativando (j√° concedido)');
        await notificationManager.unsubscribe();
        return false;
    } else {
        console.log('üîî NOTIFICATIONS: Ativando (n√£o concedido)');
        return await notificationManager.requestPermission();
    }
}
