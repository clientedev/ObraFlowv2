from app import app  # noqa: F401
# Models will be imported by routes.py and routes_pwa.py
import routes_pwa  # noqa: F401
import routes  # noqa: F401
import railway_routes_fix  # noqa: F401

# Auto-run migrations on Railway deploy with conflict resolution
import os
import logging
if os.environ.get("RAILWAY_ENVIRONMENT"):
    logging.info("üîÑ Executando migra√ß√µes autom√°ticas...")
    try:
        # First, fix user_email_config table if needed
        try:
            from fix_user_email_config_columns import fix_user_email_config_table
            fix_user_email_config_table()
        except Exception as fix_error:
            logging.warning(f"‚ö†Ô∏è Erro ao corrigir user_email_config: {fix_error}")
        
        # Then, try to fix any migration conflicts
        try:
            from fix_migration_categorias_obra import fix_categorias_obra_migration
            fix_categorias_obra_migration()
        except Exception as fix_error:
            logging.warning(f"‚ö†Ô∏è Erro ao corrigir conflitos de migra√ß√£o: {fix_error}")
        
        # Then run migrations with better error handling
        import subprocess
        result = subprocess.run(['alembic', 'upgrade', 'head'], 
                              capture_output=True, text=True, timeout=60)
        if result.returncode == 0:
            logging.info("‚úÖ Migra√ß√µes aplicadas com sucesso")
        else:
            logging.warning(f"‚ö†Ô∏è Migra√ß√£o falhou: {result.stderr}")
            # If migration fails due to duplicate table, mark migration as completed
            if "already exists" in result.stderr or "DuplicateTable" in result.stderr:
                logging.info("üîß Tabela j√° existe - marcando migra√ß√£o como conclu√≠da...")
                try:
                    from fix_migration_categorias_obra import fix_categorias_obra_migration
                    if fix_categorias_obra_migration():
                        logging.info("‚úÖ Estado de migra√ß√£o corrigido - sistema pronto")
                    else:
                        # Fallback: mark migration as completed anyway
                        logging.info("üîß Aplicando corre√ß√£o de fallback...")
                        from app import app, db
                        from sqlalchemy import text
                        with app.app_context():
                            with db.engine.connect() as connection:
                                connection.execute(text("UPDATE alembic_version SET version_num = '20250929_2303'"))
                                connection.commit()
                                logging.info("‚úÖ Migra√ß√£o marcada como conclu√≠da via fallback")
                except Exception as fix_error:
                    logging.error(f"‚ùå Erro ao corrigir migra√ß√£o: {fix_error}")
                    logging.info("üîÑ Sistema continuar√° funcionando mesmo com erro de migra√ß√£o")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è Erro nas migra√ß√µes (continuando): {e}")

# Run the Flask development server
if __name__ == '__main__':
    import os
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=False)
