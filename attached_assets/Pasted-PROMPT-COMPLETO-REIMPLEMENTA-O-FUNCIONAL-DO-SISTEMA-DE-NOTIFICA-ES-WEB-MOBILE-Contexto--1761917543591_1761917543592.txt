PROMPT COMPLETO ‚Äî REIMPLEMENTA√á√ÉO FUNCIONAL DO SISTEMA DE NOTIFICA√á√ïES (WEB + MOBILE)

‚öôÔ∏è Contexto: Projeto ObraFlowv2 (FastAPI + PostgreSQL no Railway + Frontend em JavaScript/PWA)

Objetivo principal:
Corrigir e garantir o funcionamento completo do sistema de notifica√ß√µes em tempo real, tanto no navegador (PWA) quanto no aplicativo mobile, com √≠cone de sino posicionado corretamente ao lado do bot√£o hamb√∫rguer.

üß© Requisitos funcionais e t√©cnicos:

√çcone de sino (üîî):

O √≠cone deve ficar ao lado direito do bot√£o hamb√∫rguer, fora do menu lateral.

Quando o usu√°rio clicar, deve abrir o painel lateral de notifica√ß√µes.

O sino deve exibir um contador de notifica√ß√µes n√£o lidas.

O contador deve zerar automaticamente quando o usu√°rio abrir a aba e marcar como lidas.

Backend ‚Äì API /api/notificacoes:

Corrigir o erro 500: revisar o endpoint para garantir que ele:

Retorne apenas notifica√ß√µes relacionadas ao usu√°rio logado (user_id).

Suporte filtros (lidas=false, todas=true, etc.).

Trate corretamente notifica√ß√µes expiradas (expira√ß√£o de 24h).

Exemplo de retorno esperado:

[
  {
    "id": 1,
    "tipo": "obra_criada",
    "mensagem": "Nova obra criada: Edif√≠cio Aurora",
    "criada_em": "2025-10-31T20:15:00",
    "lida": false,
    "expira_em": "2025-11-01T20:15:00"
  }
]


Criar um modelo Notification no banco (via Alembic) com os campos:

id = Column(Integer, primary_key=True)
user_id = Column(Integer, ForeignKey('users.id'), nullable=False)
tipo = Column(String(50), nullable=False)
mensagem = Column(Text, nullable=False)
criada_em = Column(DateTime, default=datetime.utcnow)
expira_em = Column(DateTime)
lida = Column(Boolean, default=False)


O endpoint deve excluir automaticamente notifica√ß√µes expiradas (usando DELETE WHERE expira_em < NOW()).

Notifica√ß√µes push (Firebase FCM):

Implementar o envio via Firebase Cloud Messaging tanto para:

Web push (PWA) usando serviceWorkerRegistration.showNotification()

Mobile push (via FCM token armazenado no campo fcm_token da tabela users)

No backend, criar um helper send_push_notification(user_id, title, body) que:

Busca o fcm_token do usu√°rio.

Envia a notifica√ß√£o via requests.post para o endpoint do FCM:

https://fcm.googleapis.com/fcm/send


Inclui as chaves corretas no header:

headers = {
    "Authorization": f"key={FIREBASE_SERVER_KEY}",
    "Content-Type": "application/json"
}


Payload:

{
  "to": "<fcm_token>",
  "notification": {
    "title": "ObraFlow",
    "body": "Voc√™ tem um novo relat√≥rio pendente"
  },
  "data": {
    "click_action": "FLUTTER_NOTIFICATION_CLICK",
    "screen": "notificacoes"
  }
}


Integra√ß√£o completa de eventos:

Quando uma obra for criada, relat√≥rio pendente for adicionado, ou relat√≥rio for reprovado, o sistema deve:

Criar o registro na tabela notifications.

Enviar push ao usu√°rio relacionado.

Atualizar contador do sino em tempo real no frontend via WebSocket ou polling a cada 5 segundos.

Frontend (PWA):

O service worker deve:

Estar registrado e ativo.

Interceptar notifica√ß√µes push mesmo com o app fechado.

Exibir via self.registration.showNotification(title, options).

Ao clicar na notifica√ß√£o, abrir o app na aba de notifica√ß√µes (/notificacoes).

Corrigir erros atuais como:

Error HTTP 500 ‚Üí tratar com fallback visual ‚ÄúErro ao carregar notifica√ß√µes‚Äù.

Implementar try/catch robusto no notifications-manager.js.

Seguran√ßa:

Apenas o usu√°rio dono da notifica√ß√£o deve receb√™-la.

Proteger endpoint /api/notificacoes com @login_required ou Depends(get_current_user).

Expira√ß√£o autom√°tica:

As notifica√ß√µes devem expirar em 24h, sendo removidas por uma tarefa peri√≥dica (BackgroundScheduler ou Celery).

As expiradas devem desaparecer do painel e do push.

üß© Extras:

Adicionar log detalhado:

INFO: Notifica√ß√£o enviada a user_id={id} tipo={tipo}

ERROR: Falha ao enviar push para {token}

Criar migra√ß√£o Alembic automaticamente se a tabela notifications ainda n√£o existir.

‚úÖ Resultado esperado:

O √≠cone de sino aparece ao lado do menu hamb√∫rguer.

O painel de notifica√ß√µes abre corretamente e exibe os eventos recentes.

Push notifications funcionam no navegador e no celular (via FCM), mesmo com o app fechado.

Nenhum erro 500 √© exibido.

Apenas o usu√°rio correto recebe notifica√ß√µes.