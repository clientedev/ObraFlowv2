Voc√™ √© um engenheiro fullstack especialista em Flask, PostgreSQL (Railway) e frontend responsivo.  
Preciso da implementa√ß√£o correta e final da **tela de lista de visitas** do sistema, garantindo que funcione 100% e siga o padr√£o de estiliza√ß√£o j√° adotado.

‚ùå Problema atual:
- A tela `/visits` retorna erro no template principal ("Erro no template principal").
- O sistema mostra "Encontradas 0 visitas", mesmo havendo registros confirmados no PostgreSQL Railway.
- O layout n√£o segue a identidade visual do restante do sistema.

‚úÖ O que deve ser feito:

1. **Backend ‚Äì Rota de Listagem**  
   - Criar/ajustar rota `/visits` (ou `/api/visits` se for a correta) para buscar todos os registros da tabela `visitas`.  
   - A tabela `visitas` possui os campos:  
     ```
     id, numero, projeto_id, responsavel_id, data_agendada, data_realizada, 
     objetivo, atividades_realizadas, observacoes, status, endereco_gps, 
     latitude, longitude, created_at, is_pessoal, criado_por
     ```
   - A query deve retornar todas as visitas do banco.  
   - Campos de data devem ser serializados com `.isoformat()`.  

   Exemplo de retorno esperado em JSON:
   ```json
   [
     {
       "id": 1,
       "numero": "VIS-0001",
       "projeto": "√Åpice Aclima√ß√£o",
       "responsavel": "Administrador do Sistema",
       "data_agendada": "2025-09-18T10:00:00",
       "status": "Agendada",
       "is_pessoal": false
     }
   ]
Frontend ‚Äì Tela de Lista de Visitas

Implementar listagem em tabela ou cards responsivos.

Cada linha/cart√£o deve exibir:

N√∫mero da visita (numero)

Projeto (projeto_id, puxando o nome do projeto)

Respons√°vel (responsavel_id, puxando o nome do usu√°rio)

Data agendada (formatada DD/MM/YYYY HH:mm)

Status (com badge colorida: Agendada = azul, Realizada = verde, Cancelada = vermelho, Rejeitada = laranja)

A√ß√µes: Ver detalhes, Editar (se permitido), Cancelar (se permitido).

Bot√µes devem seguir o padr√£o do sistema:

Azul (btn-primary) para Ver/Editar

Verde (btn-success) para Finalizar

Vermelho (btn-danger) para Cancelar/Excluir

Filtros e Busca

Adicionar campo de busca r√°pida (por n√∫mero da visita, projeto ou respons√°vel).

Filtros por status (dropdown).

Datas com filtro por intervalo (calend√°rio).

Integra√ß√£o com Agenda

Garantir que visitas listadas estejam integradas ao calend√°rio de visitas.

Clicar em uma visita deve abrir a tela de detalhes no dia/hora corretos.

Tratamento de Erros

Se n√£o houver visitas, exibir mensagem amig√°vel: "Nenhuma visita encontrada."

Nunca exibir erro t√©cnico (500/stacktrace) para o usu√°rio.

Logar detalhes no backend (current_app.logger.exception) em caso de erro.

Crit√©rios de aceita√ß√£o

/visits retorna status 200 e lista visitas reais do banco Railway.

O frontend mostra as visitas com layout responsivo e estiliza√ß√£o padr√£o.

Filtros, busca e a√ß√µes funcionam corretamente.

Se n√£o houver dados, exibir mensagem amig√°vel, sem quebrar.

üìå Importante:

Seguir a estiliza√ß√£o j√° aplicada em outras telas (como relat√≥rios).

Usar os mesmos padr√µes de bot√µes, badges e responsividade mobile.

Garantir que os dados exibidos venham do banco PostgreSQL (tabela visitas).

Se for necess√°rio ajustar rela√ß√£o com projetos e users, fa√ßa o join no backend.

Forne√ßa:

C√≥digo da rota Flask corrigida.

Ajustes de SQLAlchemy no model se necess√°rio.

Template ou componente frontend finalizado no mesmo padr√£o visual do sistema.

Passos de teste para confirmar funcionamento antes do pr√≥ximo deploy no Railway.