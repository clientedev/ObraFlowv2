Diagn√≥stico
1Ô∏è‚É£ Erro ao aprovar relat√≥rio
(psycopg2.errors.UndefinedColumn)
column "usuario_origem_id" of relation "notificacoes" does not exist


Causa:
A tabela notificacoes est√° sendo usada com uma coluna inexistente (usuario_origem_id).
Provavelmente a migra√ß√£o de banco (alembic) n√£o foi atualizada para incluir este campo.

2Ô∏è‚É£ Erro ao excluir relat√≥rio
(psycopg2.errors.InFailedSqlTransaction)
current transaction is aborted, commands ignored until end of transaction block


Causa:
H√° uma depend√™ncia (FK) entre relatorios e log_envio_emails que impede a exclus√£o.
O sistema tenta deletar o relat√≥rio antes de apagar os logs associados, gerando o erro.

‚öôÔ∏è Prompt de Corre√ß√£o Completo

Objetivo: corrigir os dois erros, garantindo que aprova√ß√£o e exclus√£o funcionem perfeitamente, mantendo integridade no banco e enviando notifica√ß√µes e e-mails corretamente.

üß† PROMPT:

Corrigir as opera√ß√µes de aprova√ß√£o e exclus√£o de relat√≥rios garantindo funcionamento completo e seguro:

1Ô∏è‚É£ Aprova√ß√£o de Relat√≥rio

Verificar e corrigir a estrutura da tabela notificacoes.
‚û§ Adicionar as colunas ausentes via Alembic, caso n√£o existam:

usuario_origem_id INTEGER REFERENCES usuarios(id) ON DELETE SET NULL,
usuario_destino_id INTEGER REFERENCES usuarios(id) ON DELETE SET NULL,
relatorio_id INTEGER REFERENCES relatorios(id) ON DELETE CASCADE,
titulo TEXT,
mensagem TEXT,
tipo VARCHAR(50),
status VARCHAR(20),
email_enviado BOOLEAN DEFAULT FALSE,
email_sucesso BOOLEAN DEFAULT FALSE,
email_erro TEXT,
created_at TIMESTAMP DEFAULT NOW(),
lida_em TIMESTAMP NULL


Ajustar o c√≥digo que insere notifica√ß√µes, validando se todos os campos existem antes de inserir.

Implementar try/except para rollback seguro caso ocorra falha no envio de e-mail, evitando transa√ß√µes abortadas.

Ap√≥s aprova√ß√£o do relat√≥rio, criar a notifica√ß√£o, enviar o e-mail e confirmar o commit da transa√ß√£o.

2Ô∏è‚É£ Exclus√£o de Relat√≥rio

Corrigir depend√™ncias de chave estrangeira:
‚û§ Em log_envio_emails, configurar ON DELETE CASCADE para a coluna relatorio_id.
Isso garante que ao excluir um relat√≥rio, todos os logs relacionados sejam removidos automaticamente.

Caso o banco n√£o permita alterar via FK, aplicar dele√ß√£o manual antes da exclus√£o:

db.query(LogEnvioEmails).filter(LogEnvioEmails.relatorio_id == id).delete()
db.query(Notificacao).filter(Notificacao.relatorio_id == id).delete()
db.delete(relatorio)
db.commit()


Garantir rollback e mensagem amig√°vel se houver falha.

3Ô∏è‚É£ Envio de E-mail

Ap√≥s aprova√ß√£o, enviar e-mail com t√≠tulo e corpo padr√£o:

Assunto: Relat√≥rio {{numero}} aprovado
Corpo: O relat√≥rio {{numero}} referente √† obra {{nome_obra}} foi aprovado por {{usuario}}.
Acesse o relat√≥rio em: {{url}}


Registrar log no banco (log_envio_emails) com status de sucesso ou erro.

4Ô∏è‚É£ Testes

Testar cria√ß√£o, aprova√ß√£o, e exclus√£o de relat√≥rios em sequ√™ncia.

Validar que notifica√ß√µes s√£o criadas, e-mails enviados e que nenhuma transa√ß√£o falha.