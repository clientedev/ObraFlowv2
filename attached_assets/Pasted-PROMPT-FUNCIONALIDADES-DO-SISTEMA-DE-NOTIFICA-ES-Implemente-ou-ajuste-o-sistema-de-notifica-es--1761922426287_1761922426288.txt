PROMPT ‚Äî FUNCIONALIDADES DO SISTEMA DE NOTIFICA√á√ïES

Implemente ou ajuste o sistema de notifica√ß√µes autom√°ticas no backend Flask conforme as regras abaixo. O objetivo √© garantir que cada tipo de evento gere a notifica√ß√£o correta, entregue ao destinat√°rio certo e exibida corretamente na listagem.

üîî FUNCIONALIDADES PRINCIPAIS
1. Obra criada

Gatilho: Quando uma nova obra √© criada no sistema.

A√ß√£o: Criar automaticamente uma notifica√ß√£o do tipo obra_criada.

Destinat√°rios: Todos os usu√°rios designados como respons√°veis pela nova obra.

Conte√∫do da notifica√ß√£o:

T√≠tulo: Nova obra criada

Mensagem: A obra "{nome_da_obra}" foi criada e voc√™ foi designado como respons√°vel.

link_destino: /obras/{id}

Objetivo: Notificar todos os respons√°veis assim que a obra for registrada, permitindo acesso r√°pido aos detalhes.

2. Relat√≥rio pendente

Gatilho: Quando um relat√≥rio √© criado, mas ainda n√£o foi aprovado.

A√ß√£o: Gerar uma notifica√ß√£o do tipo relatorio_pendente.

Destinat√°rio: O usu√°rio respons√°vel por aprovar o relat√≥rio.

Conte√∫do da notifica√ß√£o:

T√≠tulo: Relat√≥rio pendente de aprova√ß√£o

Mensagem: O relat√≥rio "{titulo}" est√° aguardando sua aprova√ß√£o.

link_destino: /relatorios/{id}

Objetivo: Garantir que o aprovador seja alertado imediatamente sobre novos relat√≥rios pendentes.

3. Relat√≥rio reprovado

Gatilho: Quando um relat√≥rio √© reprovado durante o fluxo de aprova√ß√£o.

A√ß√£o: Criar uma notifica√ß√£o do tipo relatorio_reprovado.

Destinat√°rio: O autor do relat√≥rio reprovado.

Conte√∫do da notifica√ß√£o:

T√≠tulo: Relat√≥rio reprovado

Mensagem: Seu relat√≥rio "{titulo}" foi reprovado. Verifique as observa√ß√µes e corrija antes de reenviar.

link_destino: /relatorios/{id}

Objetivo: Avisar o autor para que ele possa revisar e reenviar o relat√≥rio.

‚öôÔ∏è REGRAS GERAIS

As notifica√ß√µes devem ser salvas no banco de dados e listadas no endpoint /api/notificacoes.

Cada notifica√ß√£o deve incluir: tipo, t√≠tulo, mensagem, data de cria√ß√£o, status (nova/lida) e link_destino.

O endpoint /api/notificacoes deve retornar apenas as notifica√ß√µes do usu√°rio autenticado.

O endpoint PUT /api/notificacoes/{id}/ler deve atualizar o campo status e registrar a data em lida_em.

O sistema deve garantir que nenhum erro de coluna inexistente (UndefinedColumn) ocorra durante a execu√ß√£o.