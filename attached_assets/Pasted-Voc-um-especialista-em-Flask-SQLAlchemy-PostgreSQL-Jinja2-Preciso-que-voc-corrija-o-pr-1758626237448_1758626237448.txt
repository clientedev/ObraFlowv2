Voc√™ √© um especialista em Flask + SQLAlchemy + PostgreSQL + Jinja2.  
Preciso que voc√™ corrija o problema dos relat√≥rios REJEITADOS, que ainda n√£o funcionam corretamente no sistema.  
Use como base as instru√ß√µes pedidas pelo cliente no documento oficial (Itens 24 e 25 das atualiza√ß√µes).

### Contexto do sistema
- Backend: Flask, SQLAlchemy, PostgreSQL (Railway).
- Templates: Jinja2 com Bootstrap.
- Status poss√≠veis do relat√≥rio: "Preenchimento", "Aguardando aprova√ß√£o", "Aprovado", "Rejeitado".
- J√° existe sistema de aprova√ß√£o, mas relat√≥rios rejeitados n√£o est√£o abrindo corretamente.

---

### Regras solicitadas pelo cliente
1. Apenas o usu√°rio **aprovador** deve ver os bot√µes de **Aprovar** e **Reprovar** (Item 24).
2. Os bot√µes de aprova√ß√£o/reprova√ß√£o devem aparecer **somente na tela de Revis√£o** ‚Üí n√£o podem aparecer em outras telas (Item 25).
3. Quando um relat√≥rio for **reprovado**:
   - Deve abrir um **campo de coment√°rios obrigat√≥rio** para o aprovador justificar a rejei√ß√£o.
   - O sistema deve salvar o coment√°rio no banco (`motivo_rejeicao`).
   - O respons√°vel pelo relat√≥rio deve receber alerta (notifica√ß√£o/email).
   - O relat√≥rio deve mudar para status **"Rejeitado"**.
   - Ao abrir o relat√≥rio rejeitado:
     - Mostrar badge vermelho "Rejeitado".
     - Mostrar o **motivo da rejei√ß√£o** em destaque.
     - Exibir bot√£o **"Editar e Corrigir"** ‚Üí para que o respons√°vel fa√ßa ajustes e reenvie para aprova√ß√£o.

4. Relat√≥rios **aprovados**:
   - Devem abrir normalmente em modo de visualiza√ß√£o.
   - N√£o podem ter bot√£o "Editar".
   - Mostrar apenas badge verde "Aprovado" e bot√£o "Baixar PDF" (sem redund√¢ncias).

---

### Tarefas t√©cnicas
1. **Model Report**
   - Verificar se j√° existe campo `motivo_rejeicao`.  
   - Se n√£o existir, criar migra√ß√£o Alembic para adicionar:
     ```python
     motivo_rejeicao = db.Column(db.Text, nullable=True)
     ```

2. **Rotas Flask**
   - `@app.route("/reports/<id>/review")`:  
     - Ao clicar em **Reprovar**, abrir modal/form para motivo da rejei√ß√£o.  
     - Validar preenchimento obrigat√≥rio.  
     - Atualizar `report.status = "Rejeitado"` e `report.motivo_rejeicao = motivo`.  
     - Enviar notifica√ß√£o/email ao respons√°vel.  
   - `@app.route("/reports/<id>")`:  
     - Sempre permitir abrir relat√≥rios, mesmo rejeitados.  
     - Passar `motivo_rejeicao` para o template.

3. **Templates**
   - `view.html` / `review.html`:
     ```html
     {% if report.status == "Aprovado" %}
       <span class="badge bg-success">Aprovado</span>
       <a href="{{ url_for('download_pdf', report_id=report.id) }}" class="btn btn-success">Baixar PDF</a>
     
     {% elif report.status == "Rejeitado" %}
       <span class="badge bg-danger">Rejeitado</span>
       <div class="alert alert-warning mt-2">
         <strong>Motivo da rejei√ß√£o:</strong> {{ report.motivo_rejeicao or "N√£o informado" }}
       </div>
       <a href="{{ url_for('edit_report', report_id=report.id) }}" class="btn btn-warning">Editar e Corrigir</a>
     
     {% elif report.status == "Aguardando aprova√ß√£o" %}
       <span class="badge bg-info">Aguardando aprova√ß√£o</span>
       <!-- Apenas aprovadores -->
       {% if current_user.is_aprovador %}
         <form method="POST" action="{{ url_for('approve_report', report_id=report.id) }}">
           <button class="btn btn-success">Aprovar</button>
         </form>
         <form method="POST" action="{{ url_for('reject_report', report_id=report.id) }}">
           <textarea name="motivo" placeholder="Informe motivo da rejei√ß√£o" required></textarea>
           <button class="btn btn-danger">Reprovar</button>
         </form>
       {% endif %}
     
     {% else %}
       <!-- Status preenchimento -->
       <a href="{{ url_for('edit_report', report_id=report.id) }}" class="btn btn-primary">Editar</a>
     {% endif %}
     ```

4. **Notifica√ß√µes**
   - Ao rejeitar, gerar alerta no sistema ou enviar email ao respons√°vel.
   - Exemplo: `"Seu relat√≥rio {{ report.id }} foi rejeitado. Motivo: {{ motivo_rejeicao }}"`.

---

### Sa√≠da esperada
- Relat√≥rios rejeitados abrem normalmente.  
- Mostram motivo da rejei√ß√£o + bot√£o "Editar e Corrigir".  
- Fluxo de reprova√ß√£o com motivo obrigat√≥rio funcionando 100%.  
- Relat√≥rios aprovados s√≥ visualizam, sem editar, sem bot√µes duplicados.  
- Apenas aprovadores veem bot√µes de Aprovar/Reprovar, e s√≥ na tela de Revis√£o.  

Forne√ßa os patches completos (rotas Flask, models, migra√ß√£o Alembic, templates) e explique quais arquivos foram alterados.
üëâ Quer que eu j√° gere a migra√ß√£o Alembic pronta para adicionar motivo_rejeicao na tabela reports, junto com o patch da rota /review corrigida?







Voc√™ disse:
por favor


O ChatGPT disse:
Perfeito üôå. Vou te entregar j√° pronto: migra√ß√£o Alembic + ajuste no model Report + rotas Flask para aprovar/rejeitar + templates corrigidos. Assim voc√™ s√≥ cola no seu projeto e aplica.

1. Migra√ß√£o Alembic ‚Äî adicionar campo motivo_rejeicao
Crie um novo arquivo em migrations/versions/xxxx_add_motivo_rejeicao.py:

python
Copiar c√≥digo
"""add motivo_rejeicao to reports

Revision ID: add_motivo_rejeicao
Revises: <coloque o √∫ltimo ID aqui>
Create Date: 2025-09-22

"""
from alembic import op
import sqlalchemy as sa

# Revis√£o
revision = 'add_motivo_rejeicao'
down_revision = '<√∫ltimo_revision_id>'
branch_labels = None
depends_on = None

def upgrade():
    op.add_column('reports', sa.Column('motivo_rejeicao', sa.Text(), nullable=True))

def downgrade():
    op.drop_column('reports', 'motivo_rejeicao')
Depois rode:

bash
Copiar c√≥digo
flask db upgrade
2. Model Report (models.py)
Adicione no seu modelo Report:

python
Copiar c√≥digo
class Report(db.Model):
    __tablename__ = "reports"

    id = db.Column(db.Integer, primary_key=True)
    status = db.Column(db.String(50), nullable=False, default="preenchimento")
    motivo_rejeicao = db.Column(db.Text, nullable=True)  # <--- novo campo
    # ... os outros campos