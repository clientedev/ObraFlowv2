Corre√ß√£o do Sistema de Notifica√ß√µes (Web + Celular)

Atualmente, quando um relat√≥rio √© criado e o respons√°vel √© o administrador (que estava logado no celular), nenhuma notifica√ß√£o foi recebida, nem pelo sistema web nem pelo painel de notifica√ß√µes do celular.
Este comportamento n√£o est√° conforme as regras definidas na tabela de Tipos de Notifica√ß√£o, e precisa ser corrigido.

‚úÖ Objetivo

Garantir que todas as rela√ß√µes de notifica√ß√£o funcionem exatamente conforme especificado abaixo, e que as notifica√ß√µes sejam exibidas corretamente tanto no sistema web quanto no aplicativo m√≥vel (ou painel de notifica√ß√µes do celular).

üß© Regras funcionais esperadas

1. Obra criada

Gatilho: Quando uma nova obra √© criada.

Destinat√°rio: Todos os respons√°veis designados √†quela obra.

Comportamento esperado:

Criar registro na tabela Notificacao.

Exibir alerta no painel web e enviar push notification para o celular dos respons√°veis.

O push deve conter o nome da obra e o usu√°rio que a criou.

2. Relat√≥rio pendente

Gatilho: Quando um relat√≥rio √© criado e ainda n√£o foi aprovado.

Destinat√°rio: O usu√°rio respons√°vel pela aprova√ß√£o (exemplo: administrador).

Comportamento esperado:

Criar automaticamente uma notifica√ß√£o na tabela Notificacao.

Exibir a notifica√ß√£o no painel web e enviar notifica√ß√£o push para o celular do respons√°vel.

A notifica√ß√£o deve permanecer vis√≠vel at√© que o relat√≥rio seja aprovado.

Ao aprovar, a notifica√ß√£o deve ser marcada como ‚Äúlida‚Äù ou removida.

3. Relat√≥rio reprovado

Gatilho: Quando um relat√≥rio √© reprovado.

Destinat√°rio: O autor do relat√≥rio reprovado.

Comportamento esperado:

Criar registro na tabela Notificacao com mensagem informando que o relat√≥rio foi reprovado.

Enviar notifica√ß√£o push para o autor e exibir tamb√©m no painel web.

A notifica√ß√£o deve permanecer ativa at√© o autor visualiz√°-la.

‚öôÔ∏è Requisitos t√©cnicos obrigat√≥rios

Garantir que todas as notifica√ß√µes criadas no backend sejam disparadas em tempo real via WebSocket ou Firebase Cloud Messaging (FCM), dependendo da arquitetura atual.

Caso use WebSocket: confirmar que o canal est√° emitindo corretamente para o destinat√°rio.

Caso use FCM: confirmar que o token do dispositivo est√° sendo salvo corretamente e vinculado ao usu√°rio logado.

Verificar que o modelo Notificacao cont√©m os campos m√≠nimos necess√°rios:

id, tipo, mensagem, destinatario_id, gatilho, data_criacao, lida (boolean)


O backend deve criar a notifica√ß√£o no momento exato em que o evento ocorre (ex: obra criada, relat√≥rio pendente, relat√≥rio reprovado), e emitir o evento para o frontend e o mobile.

Garantir que o painel de notifica√ß√µes do celular e o painel web leiam da mesma tabela de notifica√ß√µes, respeitando o campo destinatario_id.

Corrigir o problema atual: o administrador (destinat√°rio da notifica√ß√£o de relat√≥rio pendente) deve receber em tempo real a notifica√ß√£o tanto no sistema quanto no painel m√≥vel.

Testar com diferentes cen√°rios:

Usu√°rio cria obra ‚Üí respons√°veis recebem notifica√ß√£o.

Usu√°rio cria relat√≥rio ‚Üí aprovador recebe notifica√ß√£o.

Relat√≥rio reprovado ‚Üí autor recebe notifica√ß√£o.

üß™ Crit√©rio de aceita√ß√£o

As tr√™s notifica√ß√µes listadas funcionam em tempo real e aparecem simultaneamente no web e no celular.

Nenhum destinat√°rio deixa de receber uma notifica√ß√£o v√°lida.

Notifica√ß√µes s√£o removidas ou marcadas como ‚Äúlidas‚Äù quando o evento correspondente √© resolvido.

Logs de backend confirmam a emiss√£o correta do evento de notifica√ß√£o para os tokens ou sockets ativos.