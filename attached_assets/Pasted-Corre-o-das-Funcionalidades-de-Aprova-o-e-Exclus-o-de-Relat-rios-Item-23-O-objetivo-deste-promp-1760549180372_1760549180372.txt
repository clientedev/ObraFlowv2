Corre√ß√£o das Funcionalidades de Aprova√ß√£o e Exclus√£o de Relat√≥rios (Item 23)

O objetivo deste prompt √© corrigir integralmente as falhas nas funcionalidades de aprova√ß√£o e exclus√£o de relat√≥rios, que atualmente resultam em erro 500 no backend (vide imagens enviadas), al√©m de garantir que o envio de notifica√ß√µes e e-mails funcione corretamente.

üõ†Ô∏è Contexto do Problema

Erro atual:
Ao aprovar ou excluir um relat√≥rio, ocorre falha SQL do tipo InFailedSqlTransaction, interrompendo o envio de notifica√ß√µes e impedindo a exclus√£o.
Exemplo de endpoint com erro:

POST /reports/{id}/approve

DELETE /reports/{id}/delete

Efeito colateral: Nenhum e-mail √© disparado e os registros de notifica√ß√£o n√£o s√£o criados.

Causa prov√°vel:
A transa√ß√£o de banco de dados n√£o est√° sendo finalizada antes do envio de e-mail ou de opera√ß√µes dependentes.

‚úÖ Objetivo do Prompt

Corrigir as funcionalidades para que:

A aprova√ß√£o de relat√≥rios:

Atualize corretamente o status no banco de dados.

Gere notifica√ß√µes aos usu√°rios vinculados √† obra (respons√°vel, funcion√°rios e aprovador).

Envie e-mail automaticamente com o PDF do relat√≥rio anexo.

Finalize a transa√ß√£o antes do envio de qualquer e-mail, evitando erro de transaction aborted.

A exclus√£o de relat√≥rios:

Remova corretamente o relat√≥rio e todos os v√≠nculos relacionados (imagens, notifica√ß√µes, registros de aprova√ß√£o).

Finalize a transa√ß√£o antes de redirecionar o usu√°rio.

Retorne uma resposta JSON ou redirecionamento limpo (sem erro 500).

‚öôÔ∏è Instru√ß√µes T√©cnicas

Backend: FastAPI (Python + SQLAlchemy + PostgreSQL).

Tabela envolvida: reports, notifications, users, projects, fotos_relatorio.

Banco: PostgreSQL.

üîπ Etapas de corre√ß√£o:

Garantir integridade da transa√ß√£o:

Envolver as opera√ß√µes de banco em blocos with session.begin():

Commitar antes de qualquer envio de e-mail ou notifica√ß√£o.

Isolar o envio de e-mail:

Ap√≥s o commit do relat√≥rio aprovado, executar o envio em uma fun√ß√£o ass√≠ncrona separada (asyncio.create_task ou BackgroundTasks).

Isso evita erro de rollback caso o envio falhe.

Configurar e-mail autom√°tico:

O e-mail deve ser enviado do usu√°rio logado (aprovador), para todos os destinat√°rios vinculados √† obra:

Respons√°vel principal

Funcion√°rios da obra (campo email)

E-mails vinculados ao cliente

Ao excluir o relat√≥rio:

Deletar registros filhos (fotos, notifica√ß√µes, etc.) via cascade.

Retornar RedirectResponse("/dashboard") com status 303 ap√≥s sucesso.

Logs e tratamento de erro:

Capturar exce√ß√µes e registrar logs (logger.error(e)).

Retornar mensagem amig√°vel no frontend (‚ÄúFalha ao enviar e-mail, mas o relat√≥rio foi aprovado com sucesso.‚Äù).

üì® Fluxo de E-mail (Padr√£o Autom√°tico)

Assunto: Relat√≥rio {{numero}} aprovado
Mensagem:

Ol√°, 

O relat√≥rio {{numero}} referente √† obra "{{obra}}" foi aprovado e est√° dispon√≠vel no sistema.

Atenciosamente,  
{{usuario_logado}}


Anexo: PDF do relat√≥rio aprovado.

üöÄ Resultado Esperado

Nenhum erro 500 ao aprovar ou excluir relat√≥rios.

Relat√≥rios aprovados geram notifica√ß√µes e enviam e-mails corretamente.

Exclus√£o limpa e funcional.

Logs amig√°veis e tratativa adequada de exce√ß√µes.