Melhoria Visual e Funcional da Se√ß√£o ‚ÄúContatos da Obra‚Äù
üéØ Objetivo

Aprimorar o layout visual e usabilidade da se√ß√£o ‚ÄúContatos da Obra‚Äù (tela de adicionar e editar obra) e garantir que, ao editar uma obra, todos os contatos j√° cadastrados sejam exibidos automaticamente, com op√ß√µes de edi√ß√£o e exclus√£o.

1Ô∏è‚É£ Escopo da Modifica√ß√£o

Aplica-se √†s rotas:

/projects/new

/projects/<id>/edit

A se√ß√£o afetada √© somente:

‚ÄúContatos da Obra‚Äù

2Ô∏è‚É£ Melhoria de Layout e Estiliza√ß√£o (Frontend / Template Jinja2 + CSS)
üß± Requisitos visuais:

Cada contato deve ser exibido dentro de um card individual com bordas suaves e espa√ßamento interno.

Espa√ßamento vertical entre cards deve ser m√≠nimo de 16px.

Dentro de cada card, os campos devem estar visualmente agrupados, com padding interno e bordas arredondadas.

O bot√£o Excluir deve ficar alinhado √† direita e n√£o colado aos inputs.

Bot√£o ‚ÄúAdicionar Contato‚Äù deve ter destaque visual, cor prim√°ria e margem superior adequada.

üíÖ Estilo sugerido (exemplo CSS):
.card-contato {
  background: #ffffff;
  border: 1px solid #dee2e6;
  border-radius: 10px;
  padding: 15px;
  margin-bottom: 18px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
}

.card-contato input {
  margin-bottom: 10px;
}

.card-contato .btn-excluir {
  float: right;
  margin-top: 5px;
  margin-bottom: 5px;
}

3Ô∏è‚É£ Estrutura de Template HTML / Jinja2

Atualizar o bloco referente a contatos no template projects/form.html:

<div class="card mt-3">
  <div class="card-header">
    <i class="bi bi-people"></i> Contatos da Obra
  </div>
  <div class="card-body">
    <p class="text-muted mb-3">
      Adicione todos os contatos associados a esta obra, incluindo nome, cargo, empresa, e-mail e telefone (opcional).
    </p>

    <div id="lista-contatos">
      {% for contato in contatos_existentes %}
      <div class="card-contato" data-id="{{ contato.id }}">
        <div class="form-group">
          <label>Nome</label>
          <input type="text" name="nome[]" class="form-control" value="{{ contato.nome }}" required>
        </div>

        <div class="form-group">
          <label>Cargo</label>
          <input type="text" name="cargo[]" class="form-control" value="{{ contato.cargo }}">
        </div>

        <div class="form-group">
          <label>Empresa</label>
          <input type="text" name="empresa[]" class="form-control" value="{{ contato.empresa }}">
        </div>

        <div class="form-group">
          <label>E-mail</label>
          <input type="email" name="email[]" class="form-control" value="{{ contato.email }}" required>
        </div>

        <div class="form-group">
          <label>Telefone (opcional)</label>
          <input type="text" name="telefone[]" class="form-control" value="{{ contato.telefone or '' }}">
        </div>

        <button type="button" class="btn btn-danger btn-sm btn-excluir" onclick="removerContato(this)">
          <i class="bi bi-trash"></i> Excluir
        </button>
      </div>
      {% endfor %}
    </div>

    <button type="button" class="btn btn-primary mt-2" id="addContatoBtn">
      <i class="bi bi-person-plus"></i> Adicionar Contato
    </button>
  </div>
</div>

4Ô∏è‚É£ Funcionalidade de Carregamento, Edi√ß√£o e Exclus√£o (JS + Backend)
‚úÖ Carregamento autom√°tico

Ao abrir /projects/<id>/edit, carregar do banco todos os contatos vinculados ao projeto.

Passar os contatos via vari√°vel contatos_existentes no render_template() do backend.

‚úÖ Edi√ß√£o

Permitir altera√ß√£o dos valores diretamente nos inputs.

Altera√ß√µes s√£o persistidas ao salvar a obra.

‚úÖ Exclus√£o

O bot√£o Excluir remove o card visualmente e adiciona o contato.id a uma lista contatos_excluidos[] no form.

No backend, esses IDs devem ser tratados para remo√ß√£o definitiva no banco.

‚úÖ Script auxiliar JS
document.getElementById('addContatoBtn').addEventListener('click', function() {
  const lista = document.getElementById('lista-contatos');
  const novo = document.createElement('div');
  novo.classList.add('card-contato');
  novo.innerHTML = `
    <div class="form-group">
      <label>Nome</label>
      <input type="text" name="nome[]" class="form-control" required>
    </div>
    <div class="form-group">
      <label>Cargo</label>
      <input type="text" name="cargo[]" class="form-control">
    </div>
    <div class="form-group">
      <label>Empresa</label>
      <input type="text" name="empresa[]" class="form-control">
    </div>
    <div class="form-group">
      <label>E-mail</label>
      <input type="email" name="email[]" class="form-control" required>
    </div>
    <div class="form-group">
      <label>Telefone (opcional)</label>
      <input type="text" name="telefone[]" class="form-control">
    </div>
    <button type="button" class="btn btn-danger btn-sm btn-excluir" onclick="removerContato(this)">
      <i class="bi bi-trash"></i> Excluir
    </button>`;
  lista.appendChild(novo);
});

function removerContato(btn) {
  btn.closest('.card-contato').remove();
}

5Ô∏è‚É£ Backend ‚Äî Ajustes no Flask

No routes.py (fun√ß√£o project_edit):

@app.route("/projects/<int:id>/edit", methods=["GET", "POST"])
@login_required
def project_edit(id):
    project = Project.query.get_or_404(id)
    contatos_existentes = EmailsClientes.query.filter_by(project_id=id).all()

    if request.method == "POST":
        # salvar ou atualizar contatos
        nomes = request.form.getlist("nome[]")
        cargos = request.form.getlist("cargo[]")
        empresas = request.form.getlist("empresa[]")
        emails = request.form.getlist("email[]")
        telefones = request.form.getlist("telefone[]")

        # l√≥gica de atualiza√ß√£o e exclus√£o
        # ...
        db.session.commit()

    return render_template(
        "projects/form.html",
        project=project,
        contatos_existentes=contatos_existentes
    )

6Ô∏è‚É£ Crit√©rios de Aceite

‚úÖ Cards de contato visualmente separados, com espa√ßamento uniforme e apar√™ncia moderna.
‚úÖ Campos n√£o colados nem sobrepostos.
‚úÖ Bot√£o ‚ÄúExcluir‚Äù bem posicionado e funcional.
‚úÖ ‚ÄúAdicionar Contato‚Äù insere novo card de forma fluida.
‚úÖ Ao editar uma obra, todos os contatos existentes aparecem carregados com seus dados reais.
‚úÖ Edi√ß√£o e exclus√£o de contatos j√° existentes funcionam corretamente.