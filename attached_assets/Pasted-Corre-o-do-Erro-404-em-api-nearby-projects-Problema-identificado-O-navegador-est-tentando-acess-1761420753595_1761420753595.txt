Corre√ß√£o do Erro 404 em /api/nearby-projects

Problema identificado:
O navegador est√° tentando acessar a rota GET /api/nearby-projects, mas o servidor retorna 404 Not Found.
Isso indica que o endpoint n√£o est√° definido no backend Flask/FastAPI ou o caminho foi alterado,
enquanto o frontend ainda tenta cham√°-lo (ex: dashboard.js, index.html ou script de geolocaliza√ß√£o).

üéØ Objetivo do prompt

Diagnosticar se a rota /api/nearby-projects existe no backend.

Criar (ou corrigir) essa rota para retornar as obras ordenadas por proximidade geogr√°fica.

Eliminar chamadas desnecess√°rias se a funcionalidade foi desativada (ex: ‚ÄúObras Pr√≥ximas‚Äù no dashboard).

Evitar m√∫ltiplas chamadas repetidas que sobrecarregam a API.

üîç 1. Diagn√≥stico ‚Äî Verifique se a rota existe

No Replit, execute:

grep -R "nearby-projects" -n app/


Se n√£o houver resultados, significa que o endpoint foi removido.
Nesse caso, siga o passo 2.

Se encontrar algo como:

@router.get("/api/nearby-projects")


verifique se est√° retornando corretamente dados em JSON.

üß† 2. Solu√ß√£o ‚Äî Recriar endpoint de obras pr√≥ximas

No arquivo do backend (routes.py ou api/projects.py):

from flask import Blueprint, request, jsonify
from math import radians, sin, cos, sqrt, atan2
from app.models import Project  # substitua conforme seu modelo
from app import db

api = Blueprint("api", __name__)

@api.route("/api/nearby-projects", methods=["GET"])
def nearby_projects():
    try:
        lat = float(request.args.get("lat"))
        lon = float(request.args.get("lon"))
        radius = float(request.args.get("radius", 10))  # km padr√£o

        projects = Project.query.filter(Project.latitude.isnot(None), Project.longitude.isnot(None)).all()

        results = []
        for p in projects:
            # C√°lculo de dist√¢ncia haversine
            R = 6371.0
            dlat = radians(p.latitude - lat)
            dlon = radians(p.longitude - lon)
            a = sin(dlat/2)**2 + cos(radians(lat)) * cos(radians(p.latitude)) * sin(dlon/2)**2
            c = 2 * atan2(sqrt(a), sqrt(1-a))
            distance = R * c

            if distance <= radius:
                results.append({
                    "id": p.id,
                    "nome": p.nome,
                    "endereco": p.endereco,
                    "status": p.status,
                    "latitude": p.latitude,
                    "longitude": p.longitude,
                    "distancia": round(distance, 2)
                })

        results.sort(key=lambda x: x["distancia"])

        return jsonify({"projects": results}), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500


‚öôÔ∏è Certifique-se de registrar o blueprint no app principal:

app.register_blueprint(api)

üß≠ 3. Caso o recurso tenha sido desativado (ex: √°rea ‚ÄúObras Pr√≥ximas‚Äù removida)

Se a funcionalidade ‚ÄúObras Pr√≥ximas‚Äù foi removida do sistema (como em atualiza√ß√µes recentes),
remova as chamadas da fun√ß√£o fetch('/api/nearby-projects') no frontend.

No Replit, execute:

grep -R "nearby-projects" -n templates/ static/


Depois, comente ou exclua os trechos como:

fetch(`/api/nearby-projects?lat=${lat}&lon=${lon}&radius=1`)


E, se o dashboard ainda exibe um painel ‚ÄúObras Pr√≥ximas‚Äù, remova o HTML correspondente:

<section id="obras-proximas">
  <!-- Conte√∫do a remover -->
</section>

‚ö° 4. Evitar chamadas duplicadas (bug comum)

No JS (provavelmente em dashboard.js), inclua debounce na fun√ß√£o de geolocaliza√ß√£o:

let lastFetch = 0;
async function atualizarObrasProximas(lat, lon) {
  const agora = Date.now();
  if (agora - lastFetch < 5000) return; // evita chamadas em menos de 5s
  lastFetch = agora;

  const resp = await fetch(`/api/nearby-projects?lat=${lat}&lon=${lon}&radius=5`);
  if (resp.ok) {
    const data = await resp.json();
    renderizarObrasProximas(data.projects);
  } else {
    console.warn("Erro ao carregar obras pr√≥ximas");
  }
}

‚úÖ 5. Resultado esperado

Ap√≥s aplicar este prompt:

‚úÖ Nenhum erro 404 /api/nearby-projects aparece no console.

‚úÖ Se a funcionalidade for mantida, as obras aparecem corretamente ordenadas por proximidade.

‚úÖ Se for removida, o dashboard carrega sem fazer chamadas a rotas inexistentes.

‚úÖ Nenhum loop de requisi√ß√µes repetidas √© gerado.