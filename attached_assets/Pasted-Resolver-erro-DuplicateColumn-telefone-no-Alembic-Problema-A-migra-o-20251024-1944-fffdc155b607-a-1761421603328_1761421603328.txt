Resolver erro DuplicateColumn telefone no Alembic

Problema:
A migra√ß√£o 20251024_1944_fffdc155b607_add_telefone_field_to_emails_clientes_.py tenta executar:

op.add_column('emails_clientes', sa.Column('telefone', sa.String(20), nullable=True))


mas o banco j√° cont√©m essa coluna.

üß© 1Ô∏è‚É£ Verificar se a coluna j√° existe

No Replit (ou terminal local conectado ao banco PostgreSQL do Railway):

psql $DATABASE_URL -c "\d emails_clientes"


Procure na listagem algo como:

telefone | character varying(20)


‚úÖ Se aparecer ‚Üí a coluna j√° existe e o Alembic deve pular essa cria√ß√£o.
‚ùå Se n√£o aparecer ‚Üí o banco n√£o recebeu a altera√ß√£o, ent√£o o erro pode estar vindo de conflito de migra√ß√£o anterior.

üß† 2Ô∏è‚É£ Ajustar a migra√ß√£o com checagem condicional

Abra o arquivo:

migrations/versions/20251024_1944_fffdc155b607_add_telefone_field_to_emails_clientes_.py


Substitua o conte√∫do da fun√ß√£o upgrade() por este trecho seguro:

from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect

def upgrade():
    conn = op.get_bind()
    inspector = inspect(conn)
    columns = [col['name'] for col in inspector.get_columns('emails_clientes')]

    if 'telefone' not in columns:
        op.add_column('emails_clientes', sa.Column('telefone', sa.String(20), nullable=True))
    else:
        print("‚ö†Ô∏è Coluna 'telefone' j√° existe ‚Äî pulando cria√ß√£o.")

def downgrade():
    conn = op.get_bind()
    inspector = inspect(conn)
    columns = [col['name'] for col in inspector.get_columns('emails_clientes')]

    if 'telefone' in columns:
        op.drop_column('emails_clientes', 'telefone')


üëâ Isso faz com que o Alembic verifique a exist√™ncia da coluna antes de tentar criar, evitando o erro.

üßπ 3Ô∏è‚É£ Corrigir o hist√≥rico de migra√ß√µes

Execute:

alembic history


Verifique qual √© a migra√ß√£o anterior √† 20251024_1944_fffdc155b607_add_telefone_field_to_emails_clientes_.

Se houver inconsist√™ncia (por exemplo, o banco j√° est√° no estado da coluna mas a migra√ß√£o n√£o foi marcada como aplicada), sincronize manualmente o cabe√ßalho de versionamento:

alembic stamp head


Isso atualiza o Alembic para o estado atual do banco sem executar novamente as migra√ß√µes.

üöÄ 4Ô∏è‚É£ Reaplicar corretamente

Depois de ajustar o script:

alembic upgrade head

‚úÖ Resultado esperado

Ap√≥s aplicar este prompt:

O deploy n√£o falha mais.

O Alembic detecta automaticamente se a coluna j√° existe.

O campo telefone fica ativo no modelo emails_clientes.

O banco e as migra√ß√µes ficam sincronizados.