Voc√™ √© um especialista em Flask + SQLAlchemy + PostgreSQL (Railway) + Jinja2 + JavaScript.  
Preciso que voc√™ implemente corretamente as melhorias abaixo no sistema de relat√≥rios de obras.  
‚ö†Ô∏è IMPORTANTE: todo o desenvolvimento deve ser **MOBILE-FIRST**, com foco em **facilidade de uso em celulares**, pois o sistema √© utilizado principalmente em campo.  
A interface deve ser otimizada para telas pequenas, com bot√µes grandes, √°reas de toque de no m√≠nimo 48px, navega√ß√£o fluida e responsiva.  

---

### Contexto atual
- O sistema usa Flask (backend) + PostgreSQL (Railway).
- Frontend com Bootstrap + Jinja2 e JavaScript vanilla.
- Existe uma se√ß√£o "Fotos" em cada relat√≥rio, mas o fluxo atual √© ruim: o usu√°rio tira foto, precisa rolar a tela para baixo para colocar legenda, depois rolar para cima para tirar outra.  
- Campo de legenda est√° escondido no bot√£o "Editar", o que atrapalha.
- J√° existe sistema de legendas pr√©-definidas, hoje restrito a desenvolvedor. Preciso mover para **administrador** com tela pr√≥pria no painel admin.

---

### Itens a implementar

#### Item 18 ‚Äì Fotos mais intuitivas (MOBILE-FIRST)
1. Ap√≥s o usu√°rio tirar ou selecionar uma foto:
   - Mostrar imediatamente a **foto tirada** em um card responsivo.
   - Abaixo da foto devem aparecer, em ordem:
     * Campo de legenda manual (input grande e f√°cil de digitar em celular).
     * Campo de sele√ß√£o de legenda pr√©-definida (select com op√ß√µes filtr√°veis).
   - Usu√°rio pode alterar legenda a qualquer momento.
2. Os bot√µes **‚ÄúC√¢mera‚Äù** e **‚ÄúGaleria‚Äù** devem estar **fixos no topo da se√ß√£o de fotos**, sempre vis√≠veis, com √°rea de toque ampla (48px+) para facilitar no mobile.
3. Interface deve ser 100% responsiva:
   - Layout em **grid de uma coluna** para celulares (cada foto ocupa a largura total).
   - Ajustar para m√∫ltiplas colunas em telas maiores.
4. Legenda deve ser salva imediatamente via AJAX ao digitar ou selecionar.

#### Item 19 ‚Äì Legendas obrigat√≥rias (MOBILE-FIRST)
1. Campo de legenda **sempre vis√≠vel embaixo da foto** (nunca escondido no bot√£o editar).
2. Ordem no card:
   - Foto
   - Legenda manual
   - Legenda pr√©-definida
3. Usu√°rio s√≥ pode avan√ßar/finalizar relat√≥rio se pelo menos um campo estiver preenchido (manual ou pr√©-definida).
4. Backend Flask deve validar isso tamb√©m (seguran√ßa e consist√™ncia).
5. No mobile, inputs devem ter padding suficiente e fonte leg√≠vel para digita√ß√£o f√°cil.

#### Item 20 ‚Äì Administra√ß√£o de legendas pr√©-definidas (ADMIN, MOBILE-FIRST)
1. Mover tela de gerenciamento de legendas para **administrador**:
   - Apenas administradores t√™m acesso (rotas com `@admin_required`).
   - CRUD completo de legendas pr√©-definidas.
2. Campos de legenda:
   - `texto`
   - `categoria` (Geral, Estrutural, El√©trica, etc.)
   - `numero_ordem` (apenas para organiza√ß√£o, n√£o aparece no PDF)
   - timestamps (`criado_em`, `atualizado_em`)
3. Funcionalidades na tela admin:
   - Adicionar, editar e excluir legendas.
   - Campo de busca para localizar legendas rapidamente.
   - Interface mobile-first: bot√µes grandes, inputs em tela cheia, listagem em cards responsivos.
4. Integra√ß√£o com editor de fotos:
   - Campo ‚ÄúLegenda pr√©-definida‚Äù deve carregar op√ß√µes da API `/api/legendas`.
   - Op√ß√µes filtr√°veis por categoria.
   - Se legenda foi exclu√≠da depois, fotos antigas devem continuar exibindo o texto salvo.

---

### Tarefas t√©cnicas

1. **Backend Flask**
   - Ajustar modelo `LegendaPredefinida` (se n√£o existir, criar).
   - Criar rotas admin `/admin/legendas/` (CRUD).
   - Criar endpoint `/api/legendas` que retorna JSON filtrado por categoria.
   - Ajustar rota de salvamento de fotos para validar obrigatoriedade de legenda.

2. **Frontend (Jinja2 + JavaScript)**
   - Criar card de foto responsivo:
     ```html
     <div class="card mb-3">
       <img src="{{ foto.url }}" class="card-img-top img-fluid" alt="Foto">
       <div class="card-body">
         <input type="text" class="form-control mb-2 legenda-manual" placeholder="Digite legenda manual">
         <select class="form-select legenda-predefinida">
           <option value="">Selecione legenda pr√©-definida</option>
         </select>
       </div>
     </div>
     ```
   - Bot√µes fixos de **C√¢mera** e **Galeria** no topo da se√ß√£o, estilo mobile.
   - JS para:
     * Salvar legendas via AJAX em tempo real.
     * Validar que pelo menos uma legenda foi preenchida antes de salvar/avan√ßar.

3. **Valida√ß√£o**
   - Frontend: bloquear bot√£o de avan√ßar se nenhum campo preenchido.
   - Backend: validar novamente na submiss√£o do relat√≥rio.

4. **UX Mobile**
   - Inputs com fonte ‚â• 16px.
   - Bot√µes grandes com √≠cones (ex.: FontAwesome: üì∑ para c√¢mera, üñºÔ∏è para galeria).
   - Feedback visual: ‚ÄúLegenda salva ‚úì‚Äù ou ‚ÄúErro ‚ùå‚Äù.

---

### Sa√≠da esperada
- C√≥digo Python para rotas admin + endpoint `/api/legendas`.
- C√≥digo Flask ajustado para salvar fotos com legenda obrigat√≥ria.
- Template Jinja2 atualizado para se√ß√£o de fotos responsiva, mobile-first.
- JS com auto-save de legendas e bot√µes fixos sempre vis√≠veis.
- Valida√ß√µes frontend + backend funcionando.
- CRUD mobile-first de legendas padr√£o no painel admin.

---

‚ö†Ô∏è Reforce: toda a interface deve ser **pensada para celular**, com **bot√µes grandes, inputs claros e intera√ß√£o m√≠nima de rolagem**.
