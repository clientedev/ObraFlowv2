Você é um especialista em Flask + SQLAlchemy + Jinja2.  
Meu sistema de relatórios apresenta o seguinte problema: **não é possível abrir relatórios com status "Aprovado" ou "Rejeitado"**.  
Preciso que você corrija esse comportamento, aplicando as seguintes regras:

### Regras de negócio
1. Relatórios **Aprovados**:
   - Devem abrir normalmente em tela de visualização (`/reports/<id>`).
   - **Não** devem ter botão "Editar".
   - Devem mostrar status "Aprovado" claramente, com badge verde.

2. Relatórios **Rejeitados**:
   - Devem abrir normalmente em tela de visualização/edição (`/reports/<id>`).
   - Devem mostrar o **motivo da rejeição** (campo de texto preenchido pelo administrador revisor).
   - Devem ter botão **"Editar"** ativo, para que o usuário possa corrigir e reenviar.

3. Relatórios em **Preenchimento** ou **Aguardando Aprovação**:
   - Continuam com comportamento normal (podem ser editados, autosave funcionando).

---

### Tarefas a implementar

1. **Rota de visualização (`/reports/<int:id>`)**
   - Ajustar a lógica para que relatórios com status `Aprovado` ou `Rejeitado` sejam carregados corretamente.  
   - Evitar redirecionar ou bloquear a abertura.
   - Exemplo:
     ```python
     @app.route("/reports/<int:report_id>")
     @login_required
     def view_report(report_id):
         report = Report.query.get_or_404(report_id)
         
         # Sempre permitir abrir relatórios
         checklist = {}
         if report.checklist_json:
             try:
                 checklist = json.loads(report.checklist_json)
             except Exception:
                 checklist = {}

         return render_template("reports/view.html", report=report, checklist=checklist)
     ```

2. **Template `view.html`**
   - Mostrar ações condicionais:
     ```html
     {% if report.status == "Aprovado" %}
       <span class="badge bg-success">Aprovado</span>
       <!-- Não mostra botão editar -->
     {% elif report.status == "Rejeitado" %}
       <span class="badge bg-danger">Rejeitado</span>
       <div class="alert alert-warning mt-2">
         <strong>Motivo da rejeição:</strong> {{ report.motivo_rejeicao or "Não informado" }}
       </div>
       <a href="{{ url_for('edit_report', report_id=report.id) }}" class="btn btn-warning">Editar e Corrigir</a>
     {% else %}
       <a href="{{ url_for('edit_report', report_id=report.id) }}" class="btn btn-primary">Editar</a>
     {% endif %}
     ```

3. **Banco de Dados**
   - Se não existir o campo `motivo_rejeicao` em `Report`, adicionar via migração Alembic:
     ```python
     motivo_rejeicao = db.Column(db.Text, nullable=True)
     ```
   - Esse campo será preenchido pelo administrador quando rejeitar o relatório.

4. **Fluxo de aprovação/rejeição**
   - Ajustar rota de rejeição para salvar o motivo:
     ```python
     report.status = "Rejeitado"
     report.motivo_rejeicao = form.motivo.data
     db.session.commit()
     ```

---

### Saída esperada
- Usuário pode abrir relatórios em qualquer status.
- **Aprovado** → só visualiza, sem editar.
- **Rejeitado** → abre com mensagem de rejeição + botão "Editar e Corrigir".
- **Preenchimento/Aguardando** → comportamento normal.
- Nenhum erro 500/404 ao tentar abrir relatórios com status finalizados.

Explique quais arquivos foram alterados (`routes/reports.py`, `templates/reports/view.html`, migração Alembic se necessário).  
