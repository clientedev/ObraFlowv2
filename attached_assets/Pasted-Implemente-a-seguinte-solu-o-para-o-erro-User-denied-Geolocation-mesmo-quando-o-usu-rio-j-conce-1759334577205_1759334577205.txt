Implemente a seguinte solu√ß√£o para o erro "User denied Geolocation", mesmo quando o usu√°rio j√° concedeu a permiss√£o:

1. Uso Correto da API de Permiss√µes

Antes de chamar navigator.geolocation.getCurrentPosition, verificar explicitamente o status da permiss√£o com:

async function requestLocation() {
    try {
        const permission = await navigator.permissions.query({ name: "geolocation" });

        if (permission.state === "granted") {
            getUserLocation(); // j√° autorizado
        } else if (permission.state === "prompt") {
            getUserLocation(); // vai abrir popup
        } else if (permission.state === "denied") {
            alert("‚ö†Ô∏è Localiza√ß√£o desativada no navegador. Ative manualmente nas configura√ß√µes de permiss√£o do site.");
        }

        // Se o estado mudar, reagir automaticamente
        permission.onchange = () => {
            if (permission.state === "granted") {
                getUserLocation();
            }
        };
    } catch (error) {
        console.error("Erro ao verificar permiss√µes:", error);
        getUserLocation(); // fallback
    }
}

function getUserLocation() {
    if (!navigator.geolocation) {
        alert("Geolocaliza√ß√£o n√£o suportada neste dispositivo.");
        return;
    }

    navigator.geolocation.getCurrentPosition(
        (position) => {
            const { latitude, longitude } = position.coords;
            console.log("üìç Localiza√ß√£o:", latitude, longitude);

            // Enviar ao backend
            fetch("/save_location", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ lat: latitude, lng: longitude })
            });
        },
        (error) => {
            if (error.code === error.PERMISSION_DENIED) {
                alert("Permiss√£o de localiza√ß√£o negada. Ative manualmente nas configura√ß√µes do navegador.");
            } else if (error.code === error.POSITION_UNAVAILABLE) {
                alert("Posi√ß√£o indispon√≠vel. Verifique se o GPS est√° ativo.");
            } else if (error.code === error.TIMEOUT) {
                alert("Tempo excedido ao capturar localiza√ß√£o.");
            } else {
                alert("Erro inesperado ao capturar localiza√ß√£o.");
            }
        },
        { enableHighAccuracy: true, timeout: 15000, maximumAge: 0 }
    );
}

// Executar no bot√£o "Tentar Novamente"
document.getElementById("localizarBtn").addEventListener("click", requestLocation);

2. For√ßar HTTPS e CORS no Railway

A API navigator.geolocation n√£o funciona em HTTP.

No backend Flask:

from flask_cors import CORS
CORS(app, supports_credentials=True)

@app.before_request
def force_https():
    if request.url.startswith("http://"):
        return redirect(request.url.replace("http://", "https://", 1), code=301)

3. Fluxo Correto

Ao abrir a tela ‚Üí sistema verifica permiss√£o atual (granted, prompt, denied).

Se denied ‚Üí alerta claro ao usu√°rio pedindo para ativar manualmente no navegador.

Se prompt ‚Üí abre popup de permiss√£o.

Se granted ‚Üí captura localiza√ß√£o e envia ao backend.

Bot√£o "Tentar Novamente" for√ßa nova solicita√ß√£o.

‚úÖ Resultado esperado:

Usu√°rio clica em Localizar ‚Üí se permiss√£o ainda n√£o foi dada, o navegador solicita corretamente.

Se j√° concedida, captura imediatamente.

Se negada permanentemente, mensagem clara para o usu√°rio ativar manualmente em Configura√ß√µes do navegador ‚Üí Permiss√µes do site.

Backend Railway recebe as coordenadas e vincula ao relat√≥rio/obra.