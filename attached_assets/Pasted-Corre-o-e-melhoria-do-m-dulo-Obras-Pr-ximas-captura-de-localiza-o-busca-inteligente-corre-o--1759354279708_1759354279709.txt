Corre√ß√£o e melhoria do m√≥dulo Obras Pr√≥ximas (captura de localiza√ß√£o + busca inteligente + corre√ß√£o de erros 400)

Objetivo:

Garantir que ao clicar em Localizar:

O sistema pe√ßa corretamente permiss√£o de localiza√ß√£o no mobile e desktop;

Capture latitude e longitude v√°lidos;

Envie esses valores no formato correto para a API /api/projects/nearby;

O back-end valide e processe corretamente, evitando erro 400;

O sistema identifique e normalize endere√ßos (Av., Rua, Estrada etc.);

Liste obras pr√≥ximas ordenadas por dist√¢ncia real (Haversine formula).

1. Front-end (captura e envio de coordenadas)

Alterar o c√≥digo do bot√£o ‚ÄúLocalizar‚Äù para:

document.querySelector('#btnLocalizar').addEventListener('click', function() {
  if (!navigator.geolocation) {
    alert('Seu dispositivo n√£o suporta geolocaliza√ß√£o.');
    return;
  }

  navigator.geolocation.getCurrentPosition(
    async (pos) => {
      const latitude = pos.coords.latitude;
      const longitude = pos.coords.longitude;

      console.log('Coordenadas capturadas:', latitude, longitude);

      try {
        const resp = await fetch('/api/projects/nearby', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ latitude, longitude })
        });

        if (!resp.ok) {
          const errorMsg = await resp.text();
          console.error('Erro no nearby API:', errorMsg);
          alert('Erro ao buscar obras pr√≥ximas: ' + errorMsg);
          return;
        }

        const projetos = await resp.json();
        renderProjetosProximos(projetos);

      } catch (err) {
        console.error('Erro ao buscar obras pr√≥ximas:', err);
        alert('Erro de comunica√ß√£o com o servidor.');
      }
    },
    (err) => {
      console.error('Erro de geolocaliza√ß√£o:', err);
      if (err.code === 1) {
        alert('Permiss√£o de localiza√ß√£o negada. Habilite para usar esta fun√ß√£o.');
      } else {
        alert('N√£o foi poss√≠vel capturar sua localiza√ß√£o. Tente novamente.');
      }
    },
    { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }
  );
});

function renderProjetosProximos(projetos) {
  const container = document.querySelector('#listaObrasProximas');
  container.innerHTML = '';
  projetos.forEach(p => {
    const li = document.createElement('li');
    li.textContent = `${p.nome} - ${p.distancia.toFixed(2)} km`;
    container.appendChild(li);
  });
}

2. Back-end (Flask API /api/projects/nearby)

No routes.py ou controlador da API, garantir:

from flask import request, jsonify
from math import radians, sin, cos, sqrt, atan2

@app.route('/api/projects/nearby', methods=['POST'])
def projects_nearby():
    data = request.get_json()
    lat = data.get('latitude')
    lon = data.get('longitude')

    if not lat or not lon:
        return jsonify({'error': 'Coordenadas inv√°lidas'}), 400

    lat = float(lat)
    lon = float(lon)

    # Haversine para calcular dist√¢ncia
    def haversine(lat1, lon1, lat2, lon2):
        R = 6371.0  # km
        dlat = radians(lat2 - lat1)
        dlon = radians(lon2 - lon1)
        a = sin(dlat/2)**2 + cos(radians(lat1)) * cos(radians(lat2)) * sin(dlon/2)**2
        c = 2 * atan2(sqrt(a), sqrt(1 - a))
        return R * c

    projetos = Projeto.query.all()
    proximos = []

    for p in projetos:
        if p.latitude and p.longitude:
            dist = haversine(lat, lon, p.latitude, p.longitude)
            proximos.append({
                'id': p.id,
                'nome': p.nome,
                'endereco': normalizar_endereco(p.endereco),
                'distancia': dist
            })

    # ordenar por dist√¢ncia
    proximos.sort(key=lambda x: x['distancia'])
    return jsonify(proximos[:10])  # retorna s√≥ os 10 mais pr√≥ximos

3. Normaliza√ß√£o inteligente de endere√ßos

Adicionar fun√ß√£o:

import re

def normalizar_endereco(endereco):
    if not endereco:
        return ''
    endereco = endereco.strip()
    endereco = re.sub(r'^(Av\.?|Avenida)\b', 'Avenida', endereco, flags=re.IGNORECASE)
    endereco = re.sub(r'^(R\.?|Rua)\b', 'Rua', endereco, flags=re.IGNORECASE)
    endereco = re.sub(r'^(Estr\.?|Estrada)\b', 'Estrada', endereco, flags=re.IGNORECASE)
    endereco = re.sub(r'^(Rod\.?|Rodovia)\b', 'Rodovia', endereco, flags=re.IGNORECASE)
    return endereco

4. Corre√ß√£o dos erros 400

Erro 400 acontece porque latitude/longitude n√£o estavam chegando ao back-end.

O prompt acima garante que sempre s√£o enviados no corpo JSON.

Caso contr√°rio, retornar resposta clara: {"error": "Coordenadas inv√°lidas"}.

5. Testes

Desktop Chrome: permitir localiza√ß√£o ‚Üí listar projetos ordenados.

Mobile Chrome: garantir que o prompt apare√ßa ‚Üí enviar coords v√°lidas ‚Üí listar.

APK/PWA: confirmar que permiss√µes nativas Android est√£o configuradas (ACCESS_FINE_LOCATION) e WebView habilita geolocaliza√ß√£o.

üëâ Esse prompt garante:

Corre√ß√£o dos erros 400.

Captura correta de latitude/longitude.

Normaliza√ß√£o de endere√ßos.

Retorno de obras ordenadas por dist√¢ncia.

Compatibilidade Desktop, Mobile e APK.