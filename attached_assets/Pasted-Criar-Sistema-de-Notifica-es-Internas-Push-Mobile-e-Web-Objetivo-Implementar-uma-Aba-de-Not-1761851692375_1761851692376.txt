Criar Sistema de Notifica√ß√µes Internas + Push (Mobile e Web)
üéØ Objetivo

Implementar uma Aba de Notifica√ß√µes com hist√≥rico, contador visual (√≠cone de sino) e notifica√ß√µes push reais ‚Äî enviadas tanto dentro do app quanto no painel de notifica√ß√µes do celular, mesmo com o app fechado.
Substituir o sistema de notifica√ß√µes por e-mail, tornando tudo centralizado e contextualizado dentro da aplica√ß√£o.

üß© Funcionalidades Principais
1. üîî √çcone de Sino com Contador

Inserir o √≠cone de sino no menu superior, √† direita do √≠cone de hamb√∫rguer, tanto na vers√£o web quanto na mobile (Flet ou PWA).

Exibir um badge num√©rico com a quantidade de notifica√ß√µes n√£o lidas.

Ao clicar no sino ‚Üí abrir uma aba lateral (drawer) ou modal com o hist√≥rico de notifica√ß√µes.

2. üóÇÔ∏è Aba de Notifica√ß√µes / Hist√≥rico

Cada notifica√ß√£o deve conter:

√çcone do tipo (üèóÔ∏è obra, üìÑ relat√≥rio, ‚ö†Ô∏è reprova√ß√£o);

T√≠tulo (ex: ‚ÄúRelat√≥rio pendente de aprova√ß√£o‚Äù);

Descri√ß√£o curta (ex: ‚ÄúO relat√≥rio REL-0008 precisa ser revisado.‚Äù);

Data e hora;

Status (lida / n√£o lida).

A√ß√µes:

Bot√£o ‚ÄúMarcar todas como lidas‚Äù;

Clique em uma notifica√ß√£o ‚Üí redireciona para a tela correspondente (ex: /reports/8);

Notifica√ß√µes expiram automaticamente ap√≥s 24h, removendo-se do contador.

3. üì± Tipos de Notifica√ß√£o
Tipo	Gatilho	Destinat√°rio
üèóÔ∏è Obra criada	Quando uma nova obra √© criada	Respons√°veis designados √†quela obra
üïê Relat√≥rio pendente	Quando um relat√≥rio √© criado e ainda n√£o foi aprovado	Usu√°rio que deve aprovar
‚ö†Ô∏è Relat√≥rio reprovado	Quando um relat√≥rio √© reprovado	Autor do relat√≥rio reprovado
4. üîÑ Notifica√ß√µes Internas + Push
üß† L√≥gica Interna

Ao ocorrer o evento (obra criada, relat√≥rio pendente, relat√≥rio reprovado):

Criar registro na tabela notificacoes;

Enviar push notification via Firebase Cloud Messaging (FCM) para o usu√°rio espec√≠fico.

üîã Expira√ß√£o Autom√°tica

Cada notifica√ß√£o deve possuir:

created_at TIMESTAMP DEFAULT NOW(),
expires_at TIMESTAMP GENERATED ALWAYS AS (created_at + INTERVAL '24 HOURS') STORED


Um processo autom√°tico (cron job) ou task do backend remove notifica√ß√µes expiradas.

‚öôÔ∏è Implementa√ß√£o T√©cnica
üß± Banco de Dados

Criar tabela:

CREATE TABLE notificacoes (
  id SERIAL PRIMARY KEY,
  usuario_id INTEGER REFERENCES usuarios(id) ON DELETE CASCADE,
  tipo VARCHAR(50),
  titulo VARCHAR(255),
  descricao TEXT,
  link_destino VARCHAR(255),
  lida BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT NOW(),
  expires_at TIMESTAMP GENERATED ALWAYS AS (created_at + INTERVAL '24 HOURS') STORED
);

‚öôÔ∏è Backend (FastAPI)

Endpoints sugeridos:

GET /notificacoes/usuario/{id}         # Lista notifica√ß√µes ativas
POST /notificacoes/marcar-como-lida    # Marca como lida
POST /notificacoes/criar               # Cria notifica√ß√£o (chamado por eventos do sistema)
DELETE /notificacoes/expiradas         # Remove expiradas (cron job)


Integra√ß√£o com Firebase Admin SDK:

from firebase_admin import messaging

def enviar_notificacao_push(token, titulo, corpo, link):
    message = messaging.Message(
        notification=messaging.Notification(
            title=titulo,
            body=corpo
        ),
        webpush=messaging.WebpushConfig(
            fcm_options=messaging.WebpushFCMOptions(link=link)
        ),
        token=token
    )
    response = messaging.send(message)
    return response

üíª Frontend (React / Flet / Web)

√çcone do sino vis√≠vel no topo:

<div className="relative cursor-pointer" onClick={abrirNotificacoes}>
  <BellIcon className="w-6 h-6 text-gray-700" />
  {contador > 0 && (
    <span className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full text-xs px-1">
      {contador}
    </span>
  )}
</div>


Drawer/modal de notifica√ß√µes:

Lista estilizada com cores diferentes para notifica√ß√µes novas.

Bot√£o ‚ÄúMarcar todas como lidas‚Äù.

No mobile, o sino aparece ao lado do menu hamb√∫rguer e abre uma tela dedicada (tela modal ‚ÄúNotifica√ß√µes‚Äù).

üì≥ Push no Celular (Mesmo com o App Fechado)

Usar Firebase Cloud Messaging (FCM):

Integrar FCM ao app (Android e iOS);

Pedir permiss√£o de notifica√ß√£o no primeiro acesso;

Salvar o token FCM do usu√°rio no backend (ex: campo fcm_token em usuarios);

Ao gerar uma notifica√ß√£o, o backend envia o push via FCM.

Mesmo com o app fechado, o usu√°rio recebe:

√çcone e texto da notifica√ß√£o;

Ao clicar ‚Üí app abre na tela correspondente (via deep link para /reports/:id ou /obras/:id).

üö´ Remo√ß√£o do Sistema de E-mail

Desativar envio de e-mails autom√°ticos relacionados a obras e relat√≥rios;

Substituir por chamadas ao endpoint /notificacoes/criar + push FCM.

‚úÖ Crit√©rios de Aceita√ß√£o

O sino exibe contador de notifica√ß√µes n√£o lidas corretamente.

Aba de hist√≥rico mostra t√≠tulo, descri√ß√£o e data.

Cada notifica√ß√£o expira automaticamente em 24h.

Push chega no celular mesmo com o app fechado.

Apenas o usu√°rio relacionado recebe a notifica√ß√£o.

Sistema de e-mail desativado para esses eventos.

Layout responsivo e consistente com o design atual.